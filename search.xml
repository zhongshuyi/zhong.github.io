<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MYSQL总笔记</title>
      <link href="/2019/08/22/MYSQL%E6%80%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/22/MYSQL%E6%80%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h1><p>数据库是一个以某种有组织的方式储存的数据集合</p><ol><li><p>表<br>表是一种结构化的文件,可用来存储某种特定类型的数据.(类似于EXCEL表格)<br>表可以保存顾客清单,产品目录,或者其他信息清单<br>在同一个数据库中,表的名字是唯一的,但在不同数据库中表的名字可以相同</p></li><li><p>模式<br>模式是关于数据库和表的布局以及特征的信息</p></li><li><p>列<br>表中的一个字段,所有表都是由一个或多个列组成的</p></li><li><p>数据类型<br>所容许的数据的类型,每个表列都有相应的数据类型,它限制该列中储存的数据</p></li><li><p>行<br>表中的一条记录<br>表中的数据是按行储存的,所保存的每个记录储存在自己的行内,如果表是网格,网格中垂直的为列,水平的为表行</p></li><li><p>主键<br>虽然主键不是必须的,但最好每个表都定义一个主键,主键列有以下特点:<br>主键列不能为NULL(空值)<br>每个主键的值必须唯一,不能与主键上的其他值相同<br>使用主键的好习惯:<br>不更新主键列的值<br>不重用主键列的值<br>不在主键列中使用可能会更改的值</p></li><li><p>SQL<br>SQL结构化查询语言,是一种专门用来与数据库通信的语言</p></li></ol><h1 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h1><h2 id="定义数据库"><a href="#定义数据库" class="headerlink" title="定义数据库"></a>定义数据库</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> &#123; <span class="keyword">database</span> | <span class="keyword">schema</span>&#125; [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名</span><br><span class="line">[ [<span class="keyword">default</span>] <span class="built_in">character</span> <span class="keyword">set</span> [=] 数据库字符集]</span><br><span class="line">[[<span class="keyword">default</span>] <span class="keyword">collate</span> [=] 字符集的校对规则];</span><br></pre></td></tr></table></figure><p>语法说明:</p><ol><li>语句中的<code>[ ]</code>中的为可选项</li><li>语句中的<code>|</code>用于分隔花括号中的选择项,两种选择一种即可,表示”或”关系</li><li>中文的字符集为gb2312,校对规则为gb2312_chinese_ci</li><li>if not exists语句会在创建前进行检查,若该数据库已存在,则不会再创建而导致错误</li></ol><p>实例:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> db_shool</span><br><span class="line"><span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> gb2312</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">collate</span> gb2312_chinese_ci;</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>在数据库中创建了一个名为db_shool的数据库<br>系统会自动在MySQL的缺省安装路径上例如<br><code>C:\Program Files\MySQL\MySQL Server 5.5\data\performance_schema</code><br>里面新建一个名字为db.opt文件,用于储存所创建数据库的全局特性</p><h3 id="选择与查看数据库"><a href="#选择与查看数据库" class="headerlink" title="选择与查看数据库"></a>选择与查看数据库</h3><ol><li><p>选择数据库<br><code>use 数据库名;</code><br>可以选择你需要操作的数据库,只有选择数据库后才能对数据库进行操作</p></li><li><p>查看数据库<br><code>show {databases | schemas}</code><br>可以查看可用数据库的列表,但只会列出当前用户权限范围内所能查看到的数据库的列表<br>其中除了自己创建的数据库外,有四个系统数据库</p></li></ol><table><thead><tr><th align="center">数据库名称</th><th align="center">数据库作用</th></tr></thead><tbody><tr><td align="center">mysql</td><td align="center">描述用户的访问权限</td></tr><tr><td align="center">information_schema</td><td align="center">保存关于MySQL服务器所维护的所有其他数据库的信息,如数据库名,数据库的表,表字段的数据类型与访问权限等</td></tr><tr><td align="center">performance_schema</td><td align="center">主要用于收集数据库服务器性能参数</td></tr><tr><td align="center">test</td><td align="center">用户利用该数据库进行测试工作</td></tr></tbody></table><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><p>可以修改数据库的 默认字符集以及校对规则</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> &#123; <span class="keyword">database</span> | <span class="keyword">schema</span>&#125; [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名</span><br><span class="line">[<span class="keyword">default</span>] <span class="built_in">character</span> <span class="keyword">set</span> [=] 数据库字符集</span><br><span class="line">[<span class="keyword">default</span>] <span class="keyword">collate</span> [=] 字符集的校对规则;</span><br></pre></td></tr></table></figure><p>注意点:</p><ol><li>此语句用于修改全局特性,也就是数据库目录中的db.opt </li><li>使用此命令时用户必须有修改权限</li><li>数据库名称省略后表示修改当前选中数据库<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2>将已创建的数据库文件夹从磁盘删除,数据库中所有数据将被删除<br><code>drop { database | schema} [if exists] 数据库名</code><br>if exists可以避免数据库不存在时报错</li></ol><h2 id="定义表"><a href="#定义表" class="headerlink" title="定义表"></a>定义表</h2><p>数据表是数据库中最重要,最基本的数据对象,是数据存储的基本单位,若没有表,数据库中的其他数据对象就没有意义</p><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><ol><li>数值类型<img src="/img/数据查询/sjlx.png"></li><li>日期类型<img src="/img/数据查询/sjlx1.png"></li><li>字符串类型<img src="/img/数据查询/sjlx2.png"></li></ol><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名</span><br><span class="line">(</span><br><span class="line">字段名<span class="number">1</span> 数据类型 [列级完整性约束条件] [默认值]</span><br><span class="line">[, 字段名<span class="number">2</span> 数据类型 [列级完整性约束条件] [默认值] ]</span><br><span class="line">[, ....]</span><br><span class="line">[,表级完整性约束条件]</span><br><span class="line">)[<span class="keyword">engine</span>= 引擎类型];</span><br></pre></td></tr></table></figure><ol><li>创建者必须有表的create权限</li><li><code>[ ]</code>中的参数都是可选参数</li><li>创建多字段必须用逗号隔开,字段名在表中必须唯一</li></ol><h3 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h3><ol><li><p>查看所有表名称<br><code>show tables [{from | in} 数据库名];</code><br>{from | in} 数据库名可以显示非当前数据库中的数据库表名称</p></li><li><p>查看表的基本结构<br>查看表的字段名,字段数据类型,字段值是否允许为空,是否为主键,是否有默认值等<br><code>show columns {from | in} 表名 [{from|in}数据库名];</code><br><code>{describe | desc} 表名;</code></p></li><li><p>查看表的详细结构<br><code>show create table 表名 {; | \G}使用</code>\G`结尾可以使信息更清晰</p></li></ol><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><p>常用:修改字段名或字段数据类型,添加和删除字段,修改字段排练位置,更改表的储存引擎类型,增加和删除表的约束等</p><ol><li><p>添加字段<br>在已有的表中添加字段,可同时添加多个<br><code>alter table 表名 add [column] 新字段名 数据类型  [约束条件] [first | after  已有字段名]</code><br>first表示将字段添加到表的第一个字段<br>after表示添加到指定字段后面一个<br>如果没有这两个参数,默认添加到表的最后一列</p></li><li><p>修改字段<br>change子句:同时修改列名和数据类型,并且可以修改多个(需要逗号隔开)<br><code>alter table 表名 change [column] 原字段名 新字段名 数据类型[约束条件];</code><br>alter子句:修改或删除表中指定列的默认值<br><code>alter table 表名 alter [column] 字段名 {set | drop } default;</code><br>modify子句:修改数据类型或指定列在表中的位置<br><code>alter table 表名 modify [column] 字段名 数据类型 [约束条件] [first | after 已有字段名]</code></p></li><li><p>删除字段<br>在删除列后,原本在该列的数据也会被删除<br><code>alter table 表名 drop [column] 字段名;</code></p></li></ol><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><p><code>alter table 原表名 rename [to] 新表名;</code><br><code>rename  table 原表名1  to 新表名1[,原表名 2  to 新表名2]....;</code><br>rename  table子句可以重命名多个表名</p><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p><code>drop table [if exists ] 表1 [,表2]...;</code><br>可以删除多个表<br>if exists 可以判断表是否存在再删除,避免出错</p><h2 id="数据的完整性约束"><a href="#数据的完整性约束" class="headerlink" title="数据的完整性约束"></a>数据的完整性约束</h2><p>完整性规则是对关系的某种约束条件<br>对关系模型施加完整性约束,则是为了数据库应用中保障数据的正确性和一致性,防止数据库中存在不符合语义的不正确的数据,这也是数据库服务器最重要的功能之一<br>完整性约束既能有效防止对MYSQL数据库的意外破坏和非法存取,又能提高完整性检测的效率,还能减轻MySQL编程人员的工作负担</p><h3 id="定义实体完整性"><a href="#定义实体完整性" class="headerlink" title="定义实体完整性"></a>定义实体完整性</h3><p><strong>通过主键约束和候选键约束实现,主属性不能为空</strong></p><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><ol><li>每个主键的值必须唯一,且不能为null</li><li>每个表只能有一个主键</li><li>复合主键不能包含不必要的多余列</li><li>一个列名在复合主键的列表中只能出现一次</li></ol><p>定义:<br>将字段studentNo定义为主键<br>列级:<br>某个字段后加上关键字primary key<br>例:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_student</span><br><span class="line">(</span><br><span class="line">studentNo <span class="built_in">char</span>(<span class="number">10</span>) primary <span class="keyword">key</span>,</span><br><span class="line">studentName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">birthday <span class="built_in">date</span>,</span><br><span class="line">nation <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">'汉'</span>,</span><br><span class="line">classNo <span class="built_in">char</span>(<span class="number">6</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><p>表级:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_student</span><br><span class="line">(</span><br><span class="line">studentNo <span class="built_in">char</span>(<span class="number">10</span>) ,</span><br><span class="line">studentName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">birthday <span class="built_in">date</span>,</span><br><span class="line">nation <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">'汉'</span>,</span><br><span class="line">classNo <span class="built_in">char</span>(<span class="number">6</span>),</span><br><span class="line">primary <span class="keyword">key</span>(studentNo)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><h4 id="完整性约束的命名"><a href="#完整性约束的命名" class="headerlink" title="完整性约束的命名"></a>完整性约束的命名</h4><p>在<strong>表级完整约束性</strong>前面使用constraint给约束命名<br><code>constraint 约束名字 完整性约束(字段列表)</code></p><h4 id="候选键约束"><a href="#候选键约束" class="headerlink" title="候选键约束"></a>候选键约束</h4><ol><li>候选键可以是某一列,也可以是某些列的组合</li><li>值必须唯一,且不能是null</li></ol><p>定义:<br>与主键约束相似,同样有列级与表级,定义时只是把主键约束的primary key 换成unique即可</p><h3 id="定义参照完整性-外键"><a href="#定义参照完整性-外键" class="headerlink" title="定义参照完整性(外键)"></a>定义参照完整性(外键)</h3><p>参照完整性规则定义的是外键与主键之间的引用规则,既外键的取值或者为空,或者等于被参照关系中的某个主键的值<br>例如有某个年纪的班级列表与某个班级的人员表,学生的班级编号必须是班级列表里已存在的主键值</p><p>注意:</p><ol><li>被参照表必须已创建,或者是当前正在创建,若是后一种,则被参照表与参照表是同一个表,这样的表称为自参照表,这样的结构 ,称为自参照完整性</li><li>必须在被参照表的表名后面指定列名或列名的组合,这个列或列的组合必须是被参照表的主键或候选键</li><li>主键列不能为NULL,但外键可以为空值</li><li>外键对应列的数据类型必须与被参照表的主键对应数据类型相同</li><li>外键只能使用储存引擎InnoDB创建的表中,其他储存引擎不支持外键</li></ol><p>列级方式示例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_student</span><br><span class="line">(</span><br><span class="line">studentNo <span class="built_in">char</span>(<span class="number">10</span>) ,</span><br><span class="line">studentName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">birthday <span class="built_in">date</span>,</span><br><span class="line">nation <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">'汉'</span>,</span><br><span class="line">classNo <span class="built_in">char</span>(<span class="number">6</span>) <span class="keyword">references</span> tb_class(classNo),</span><br><span class="line"><span class="keyword">constraint</span> PK_student primary <span class="keyword">key</span>(studentNo)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><p>该外键定义成功的前提条件是:<br>tb_class表已存在且classNo字段是该表的主键<br>定义完成后tb_student表中classNo的值必须为tb_class表中主键classNo列的值</p><p>表级方式遵循上面规则</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_student</span><br><span class="line">(</span><br><span class="line">studentNo <span class="built_in">char</span>(<span class="number">10</span>) ,</span><br><span class="line">studentName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">birthday <span class="built_in">date</span>,</span><br><span class="line">nation <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">'汉'</span>,</span><br><span class="line">classNo <span class="built_in">char</span>(<span class="number">6</span>) ,</span><br><span class="line"><span class="keyword">constraint</span> PK_student primary <span class="keyword">key</span>(studentNo)</span><br><span class="line"><span class="keyword">constraint</span> Fk_student <span class="keyword">foreign</span> <span class="keyword">key</span>(classNo) <span class="keyword">references</span> tb_class(classNo)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><p>给外键定义参照动作<br>给外键定义参照动作时，需要包括两部分：一是要指定参照动作适用的语句，即update和delete 语句；二是要指定采取的动作，即 cascade、restrict、set null、no action和setdefault，其中restrict为默认值。具体策略如下：</p><p><code>RESTRICT</code>：限制策略，即当要删除或修改被参照表中被参照列上且在外键中出现的值时，系统拒绝对被参照表的删除或修改操作。<br><code>CASCADE</code>：级联策略，即从被参照表中删除或修改记录时，自动删除或修改参照表中匹配的记录。<br><code>SET NULL</code>：置空策略，即当从被参照表中删除或修改记录时，设置参照表中与之对应的外键列的值为NULL。这个策略需要被参照表中的外键列没有声明限定词NOT NULL。<br><code>NO ACTION</code>：表示不采取实施策略，即当一个相关的外键值在被参照表中时，删除或修改被参照表中键值的动作不被允许。该策略的动作语义与RESTRICT相同。<br><code>SET DEFAULT</code>：默认值策略，即当从被参照表中删除或修改记录行，设置参照表中与之对应的外键列的值为默认值。这个策略要求已经为该列定义了默认值。</p><p>参照动作只需要在定义表时在最后的定义语句之后加上 <code>on 参照动作</code>就可以了</p><h3 id="用户定义的完整性"><a href="#用户定义的完整性" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h3><p>用户定义的完整性规则反应了某一具体应用所涉及的数据应满足的语义要求<br>例如性别不能为空且只能为男或女</p><ol><li><p>非空约束<br>非空约束是指字段的值不能为空,如果用户在添加数据时没有给其指定值,数据库系统就会报错<br>定义方法:在某个列定义时在后面添加 not null即可</p></li><li><p>check约束<br>check约束需要指定限定条件,可以分表级跟列级,列级可以定义单个字段,表级可以定义多个<br>定义:<br><code>check(表达式);</code><br>可以使用简单表达式也可以使用复杂的表达条件作为限定条件,例如子查询</p></li></ol><h3 id="更新完整性约束"><a href="#更新完整性约束" class="headerlink" title="更新完整性约束"></a>更新完整性约束</h3><p>可以使用alter table 语句更新完整性约束</p><h4 id="删除约束"><a href="#删除约束" class="headerlink" title="删除约束"></a>删除约束</h4><ol><li><p>删除外键约束<br><code>alter table 表名 drop foreign key 外键约束名</code><br>如果定义时没有指定外键约束名字可以用show create table语句查看系统给外键约束指定的名字</p></li><li><p>删除主键约束<br><code>alter table 表名 drop primary key;</code><br>因为主键一个表中只能定义一个所以可以不使用名字</p></li><li><p>删除候选键约束<br>删除候选键约束时,实际删除的的唯一性索引,应使用drop index子句删除,若没有给定约束名,MySQL自动将字段名定义成索引名<br><code>alter table 表名 drop index {约束名 | 候选键字段名};</code></p></li></ol><h4 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h4><p>可以使用alter table语句添加完整性约束</p><ol><li><p>添加主键约束<br><code>alter table 表名 add [constraint 约束名] primary key(主键字段);</code></p></li><li><p>添加外键约束<br><code>alter table 表名 add [constraint 约束名] foreign key(外键字段名)  references  被参照表(主键字段名);</code></p></li><li><p>添加候选键约束<br><code>alter table 表名 add [constraint 约束名] unique key(字段名);</code></p></li></ol><h1 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h1><h2 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h2><p>设已定义表</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image.png" alt></p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image1.png" alt></p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image2.png" alt></p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image3.png" alt><br>表中有数据</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image4.png" alt></p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image5.png" alt></p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image6.png" alt></p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image7.png" alt></p><p>使用select语句可以在需要时从数据库中快捷方便地检索,统计或输入数据</p><p>语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [<span class="keyword">all</span> | <span class="keyword">distinct</span> | <span class="keyword">distinctrow</span> ]&lt;目标列表达式<span class="number">1</span>&gt;[,&lt;目标列表达式<span class="number">2</span>&gt;]..</span><br><span class="line"><span class="keyword">form</span>  &lt;表名<span class="number">1</span>或视图名&gt;[,表名<span class="number">2</span>或视图名<span class="number">2</span>&gt;]..</span><br><span class="line">[<span class="keyword">where</span>&lt;条件表达式&gt;]</span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">by</span> &lt;列名<span class="number">1</span>&gt; [<span class="keyword">having</span>&lt;条件表达式&gt;]]</span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">by</span> &lt;列名<span class="number">2</span>&gt; [<span class="keyword">asc</span>  |  <span class="keyword">desc</span>]]</span><br><span class="line">[<span class="keyword">limit</span>[m,]  n ]</span><br></pre></td></tr></table></figure><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><h3 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a>查询指定字段</h3><p>语法:</p><p> <code>select  目标列表达式1,目标列表达式2,...目标列表达式n  from 表名;</code> </p><p>例子</p><p>从班级表tb_class查询所有班级的班级编号、所属学院和班级名称</p><p> <code>select  classno,depatment,classname from tb_class</code> </p><p>该查询执行的过程是:</p><p>首先从tb_class表中依次取出每条记录,然后对每条记录仅选取classno,depatment,和classname三个字段的值,形成一条新纪录,最后将这些新纪录组织为一个结果表输出</p><p><img src="%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%5CImage8.png" alt></p><h3 id="查询所有字段"><a href="#查询所有字段" class="headerlink" title="查询所有字段"></a>查询所有字段</h3><p>查询所有字段有两种方法,一种是将所有的字段在select后面列出来,一种是在select后面加 `*`号</p><p>我们当然是选择比较方便的一种,加`*`号,此时结果集各列的次序与这些列在表定义中出现的顺序一致</p><p>语法:</p><p> <code>select * from tb_class</code> </p><h3 id="查询经过计算的值"><a href="#查询经过计算的值" class="headerlink" title="查询经过计算的值"></a>查询经过计算的值</h3><p>语法:</p><p> <code>select  字段或表达式1,字段或表达式2... from 表名</code> </p><p>查询的可以是表达式,也可以是函数和字段名</p><h3 id="定义字段的别名"><a href="#定义字段的别名" class="headerlink" title="定义字段的别名"></a>定义字段的别名</h3><p>若希望列的名称显示为自定义的列名时,可以通过给列取别名的方式实现</p><p>语法:</p><p><code>字段名 [AS] 字段别名</code></p><p>AS是可选字段,也可以直接省略AS,直接用空格隔开 ,<code>字段名 字段别名</code></p><p>例子:从学生表tb_student查询全体学生的姓名、性别和年龄，要求分别以别名‘姓名’、‘性别’和‘年龄’显示</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image9.png" alt></p><p>详解:</p><p>先查询studentname与sex列,再计算 <code>year(now())-year(birthday)</code> 表达式,这里用到两个函数</p><p>year函数:返回参数中年的部分,例如<code>year(2019-01-01)</code>的结果是2019</p><p>now函数:无参数,返回现在的系统时间</p><p>使用现在系统的年减去生日列的年得到年龄</p><p>as后跟着的是这个列的别名,在查询后得到的结果表头不会太长</p><h3 id="带条件的查询"><a href="#带条件的查询" class="headerlink" title="带条件的查询"></a>带条件的查询</h3><p>select语句中可以使用where子句中指定的过滤条件,从from子句的中间结果中选取适当的行,实现数据的过滤</p><p>语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 目标列表达式<span class="number">1</span>,目标列表达式<span class="number">2</span>,...目标列表达式n</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> 查询条件;</span><br></pre></td></tr></table></figure><p>常用查询条件</p><table><thead><tr><th align="center">查询条件</th><th align="center">操作符</th></tr></thead><tbody><tr><td align="center">比较</td><td align="center"><code>=,&lt;&gt;,!=,&lt;,&lt;=,&gt;,&gt;=,!&lt;,!&gt;,not+含比较运算符的表达式</code></td></tr><tr><td align="center">确定范围</td><td align="center">between and,not between and</td></tr><tr><td align="center">字符匹配</td><td align="center">like,not like</td></tr><tr><td align="center">空值</td><td align="center">is null ,is not null</td></tr><tr><td align="center">多重条件</td><td align="center">and ,or</td></tr></tbody></table><h4 id="比较查询"><a href="#比较查询" class="headerlink" title="比较查询"></a>比较查询</h4><p>比较运算符用于指定目标列表达式的值,当目标列表达式的值与指定值相等时,返回逻辑值真,否则返回假</p><p>例子:<br> 从学生表tb_student查询学号为2013110201的学生的详细情况</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image10.png" alt></p><p>题中要求查询学号为2013110201的学生的所有消息,所以使用返回全部列的表达式,<code>select*from</code></p><p>要求是学号为2013110201,所以where后面跟着的条件为 student=’2013110201’</p><h4 id="确定范围的查询"><a href="#确定范围的查询" class="headerlink" title="确定范围的查询"></a>确定范围的查询</h4><p>当查询条件被限制在某个范围,可以使用between…and</p><p>语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 目标列表达式<span class="number">1</span>,目标列表达式<span class="number">2</span>,...目标列表达式n</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> 指定列 [<span class="keyword">not</span>] <span class="keyword">between</span> 值<span class="number">1</span>  <span class="keyword">and</span> 值<span class="number">2</span></span><br></pre></td></tr></table></figure><p>可以查询指定列满足值1和值2之间的数据,但包含这两个值,例如在20到30之间包含20和30</p><p>例</p><p>从学生表tb_student查询年龄在20到23岁之间的学生姓名、性别、年龄</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image11.png" alt></p><p>使用函数计算年龄,然后起个别名,过滤条件是计算的年龄在20和30之间并包含20和30</p><p>若是between and 前面加了关键字 not 则表示不在这个范围内,并且不包含这两个值</p><h4 id="带in的集合查询"><a href="#带in的集合查询" class="headerlink" title="带in的集合查询"></a>带in的集合查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 目标列表达式<span class="number">1</span>,目标列表达式<span class="number">2</span>,...目标列表达式n</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> 指定列 <span class="keyword">in</span> (值,值,值)</span><br></pre></td></tr></table></figure><p>集合内的值用逗号隔开</p><p>只要满足一个值,就返回结果</p><p>例子</p><p>从学生表tb_student查询籍贯是北京、天津和上海的学生信息</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image12.png" alt></p><p>例子查询了籍贯北京,上海,天津只要是满足任意一个就可以</p><p>带not关键字的</p><p>从学生表tb_student查询籍贯不是北京、天津的学生信息</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image13.png" alt></p><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>关键字like 用于字符串的匹配</p><p>语法</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 目标列表达式<span class="number">1</span>,目标列表达式<span class="number">2</span>,...目标列表达式n</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> 指定列 [<span class="keyword">not</span>] <span class="keyword">like</span> <span class="string">'&lt;匹配串&gt;'</span></span><br></pre></td></tr></table></figure><p>查找指定字段与的值与&lt;匹配串&gt;相匹配的记录,匹配串可以是一个完整的常字符串,也可以含有通配符</p><p>常用通配符</p><p>`%`:代表任意长度的字符串,甚至长度为零的字符</p><p>‘_‘:代表任意单个字符</p><p>例子:</p><p>从学生表tb_student查询所有姓“王”的学生的学号、姓名和班号</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image14.png" alt><br>例子使用%通配符查询了所有姓王的同学的部分信息,无论名字是几个字</p><p>使用not关键字</p><p>从学生表tb_student查询所有不姓“江”的学生的学号、姓名和班号</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image15.png" alt></p><p>查询所有包含’林’字的<code>where studentname like &#39;%林%</code></p><h4 id="查询是否是空值"><a href="#查询是否是空值" class="headerlink" title="查询是否是空值"></a>查询是否是空值</h4><p>空值一般表示数据未知,不确定或以后再添加.空值不等于0,也不同于字符串.</p><p>当需要查询某字段内容是否为空值时,可以使用关键字IS  NULL 来实现</p><p>例子<br>从课程表tb_course查询缺少先修课的课程信息;</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/Image16.png" alt></p><p>另外,可以用IS NOT  NULL查找字段值不为空的记录</p><h4 id="带AND或OR的多条件查询"><a href="#带AND或OR的多条件查询" class="headerlink" title="带AND或OR的多条件查询"></a>带AND或OR的多条件查询</h4><p>and和or可以用来连接多个查询条件</p><p>and限定必须满足所以条件的记录才会返回</p><p>or表示只要满足其中一个查询条件就会被返回</p><p>and 的优先级高于or,可以使用括号改变优先级</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 目标列表达式<span class="number">1</span>,目标列表达式<span class="number">2</span>,...目标列表达式n</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> 条件<span class="number">1</span>  <span class="keyword">OR</span> | <span class="keyword">AND</span> 条件<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="查询结果排序"><a href="#查询结果排序" class="headerlink" title="查询结果排序"></a>查询结果排序</h4><p>如果想对查询的结果以某个字段进行排序,可以使用order by子句</p><p>语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 目标列表达式<span class="number">1</span>,目标列表达式<span class="number">2</span>,...目标列表达式n</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 字段名 [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>]</span><br></pre></td></tr></table></figure><p>order by 后面跟着的是要排序的字段名</p><p>ASC 是表示按升序排序</p><p>DESC 表示按降序排序</p><p>如果没有指定升序还是降序,则默认按升序</p><p>如果排序的字段是中文,则按拼音的字母顺序进行排序</p><h4 id="限制记录查询"><a href="#限制记录查询" class="headerlink" title="限制记录查询"></a>限制记录查询</h4><p>如果记录太多,只想查询前面几行,或者从第几行开始显示几行,这个时候可以使用限制记录查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 目标列表达式<span class="number">1</span>,目标列表达式<span class="number">2</span>,...目标列表达式n</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">limit</span> [位置偏移量,]行数;</span><br></pre></td></tr></table></figure><p>位置偏移量:默认值为0,表示从第一行开始显示,如果位置偏移量为1,则表示从第二行开始显示,以此类推</p><p>行数:表示要显示的行数,要显示多少行就写多少行</p><p><strong>注意:</strong></p><ol><li><strong>行数必须为非负的整数常量,若指定行数大于实际有的行数,则只能返回实际有的行数</strong></li><li><strong>如果既有order by 子句,又有limit子句,则limit子句必须在order by 子句之后</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换系统</title>
      <link href="/2019/08/19/%E6%8D%A2%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/08/19/%E6%8D%A2%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>电脑系统如果崩了，或者你错误的删了一些电脑系统盘里的东西需要换一个系统，去店里得五十块，这个时候如果自己会装系统就可以轻松省下这一笔钱了</p><p>由于网上PE装机教程一抓一大把,所以今天来教一个不一样的：直接将ISO镜像文件写入U盘，写入后直接插u盘可以装系统，不用进入PE，方便至极，而且U盘空余的空间可以存其他东西</p><h1 id="准备材料："><a href="#准备材料：" class="headerlink" title="准备材料："></a>准备材料：</h1><ol><li>一个U盘（4G以上吧）</li><li>软碟通：<br>链接：<a href="https://pan.baidu.com/s/1b_W2bjMQKYMpUGIVq2Sf9Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1b_W2bjMQKYMpUGIVq2Sf9Q</a><br>提取码：vez5 </li><li>一个系统的镜像文件：<br>简体中文版：链接： <a href="https://pan.baidu.com/s/10PnW8lpBZC1niqi0Y1jdyA" target="_blank" rel="noopener">https://pan.baidu.com/s/10PnW8lpBZC1niqi0Y1jdyA</a> 提取码：8lpw<br>简体中文专业版：链接：<a href="https://pan.baidu.com/s/1SD2FEtHUK28CMvlv_eZt1A" target="_blank" rel="noopener">https://pan.baidu.com/s/1SD2FEtHUK28CMvlv_eZt1A</a> 提取243f <pre><code>安装密钥：VK7JG-NPHTM-C97JM-9MPGT-3V66T </code></pre>企业版：链接：<a href="https://pan.baidu.com/s/1pNWag6Qvxb7rBLQDZYQndg" target="_blank" rel="noopener">https://pan.baidu.com/s/1pNWag6Qvxb7rBLQDZYQndg</a> 提取码：lis2</li></ol><p>版本自行选择</p><h1 id="安装软碟通（注册码文件内有"><a href="#安装软碟通（注册码文件内有" class="headerlink" title="安装软碟通（注册码文件内有)"></a>安装软碟通（注册码文件内有)</h1><h1 id="打开系统映像"><a href="#打开系统映像" class="headerlink" title="打开系统映像"></a>打开系统映像</h1><p>双击打开<strong>（因为安装软碟通后设置了文件关联，可以直接打开ISO文件跳至软碟通）</strong><br><img src="/img/装系统/ZXT1.png"><br><img src="/img/装系统/ZXT2.png"></p><h1 id="插入U盘-最少8个g"><a href="#插入U盘-最少8个g" class="headerlink" title="插入U盘(最少8个g)"></a>插入U盘(最少8个g)</h1><h1 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h1><p>点启动里的写入硬盘映像<br><img src="/img/装系统/ZXT3.png"><br>然后点写入<br><img src="/img/装系统/ZXT4.png"></p><p>#</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 必备 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
