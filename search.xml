<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MYSQL总笔记</title>
      <link href="/2019/08/22/MYSQL%E6%80%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/22/MYSQL%E6%80%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h1><p>数据库是一个以某种有组织的方式储存的数据集合</p><ol><li><p>表<br>表是一种结构化的文件,可用来存储某种特定类型的数据.(类似于EXCEL表格)<br>表可以保存顾客清单,产品目录,或者其他信息清单<br>在同一个数据库中,表的名字是唯一的,但在不同数据库中表的名字可以相同</p></li><li><p>模式<br>模式是关于数据库和表的布局以及特征的信息</p></li><li><p>列<br>表中的一个字段,所有表都是由一个或多个列组成的</p></li><li><p>数据类型<br>所容许的数据的类型,每个表列都有相应的数据类型,它限制该列中储存的数据</p></li><li><p>行<br>表中的一条记录<br>表中的数据是按行储存的,所保存的每个记录储存在自己的行内,如果表是网格,网格中垂直的为列,水平的为表行</p></li><li><p>主键<br>虽然主键不是必须的,但最好每个表都定义一个主键,主键列有以下特点:<br>主键列不能为NULL(空值)<br>每个主键的值必须唯一,不能与主键上的其他值相同<br>使用主键的好习惯:<br>不更新主键列的值<br>不重用主键列的值<br>不在主键列中使用可能会更改的值</p></li><li><p>SQL<br>SQL结构化查询语言,是一种专门用来与数据库通信的语言</p></li></ol><h1 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h1><h2 id="定义数据库"><a href="#定义数据库" class="headerlink" title="定义数据库"></a>定义数据库</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> &#123; <span class="keyword">database</span> | <span class="keyword">schema</span>&#125; [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名</span><br><span class="line">[ [<span class="keyword">default</span>] <span class="built_in">character</span> <span class="keyword">set</span> [=] 数据库字符集]</span><br><span class="line">[[<span class="keyword">default</span>] <span class="keyword">collate</span> [=] 字符集的校对规则];</span><br></pre></td></tr></table></figure><p>语法说明:</p><ol><li>语句中的<code>[ ]</code>中的为可选项</li><li>语句中的<code>|</code>用于分隔花括号中的选择项,两种选择一种即可,表示”或”关系</li><li>中文的字符集为gb2312,校对规则为gb2312_chinese_ci</li><li>if not exists语句会在创建前进行检查,若该数据库已存在,则不会再创建而导致错误</li></ol><p>实例:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> db_shool</span><br><span class="line"><span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> gb2312</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">collate</span> gb2312_chinese_ci;</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>在数据库中创建了一个名为db_shool的数据库<br>系统会自动在MySQL的缺省安装路径上例如<br><code>C:\Program Files\MySQL\MySQL Server 5.5\data\performance_schema</code><br>里面新建一个名字为db.opt文件,用于储存所创建数据库的全局特性</p><h3 id="选择与查看数据库"><a href="#选择与查看数据库" class="headerlink" title="选择与查看数据库"></a>选择与查看数据库</h3><ol><li><p>选择数据库<br><code>use 数据库名;</code><br>可以选择你需要操作的数据库,只有选择数据库后才能对数据库进行操作</p></li><li><p>查看数据库<br><code>show {databases | schemas}</code><br>可以查看可用数据库的列表,但只会列出当前用户权限范围内所能查看到的数据库的列表<br>其中除了自己创建的数据库外,有四个系统数据库</p></li></ol><table><thead><tr><th align="center">数据库名称</th><th align="center">数据库作用</th></tr></thead><tbody><tr><td align="center">mysql</td><td align="center">描述用户的访问权限</td></tr><tr><td align="center">information_schema</td><td align="center">保存关于MySQL服务器所维护的所有其他数据库的信息,如数据库名,数据库的表,表字段的数据类型与访问权限等</td></tr><tr><td align="center">performance_schema</td><td align="center">主要用于收集数据库服务器性能参数</td></tr><tr><td align="center">test</td><td align="center">用户利用该数据库进行测试工作</td></tr></tbody></table><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><p>可以修改数据库的 默认字符集以及校对规则</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> &#123; <span class="keyword">database</span> | <span class="keyword">schema</span>&#125; [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名</span><br><span class="line">[<span class="keyword">default</span>] <span class="built_in">character</span> <span class="keyword">set</span> [=] 数据库字符集</span><br><span class="line">[<span class="keyword">default</span>] <span class="keyword">collate</span> [=] 字符集的校对规则;</span><br></pre></td></tr></table></figure><p>注意点:</p><ol><li>此语句用于修改全局特性,也就是数据库目录中的db.opt </li><li>使用此命令时用户必须有修改权限</li><li>数据库名称省略后表示修改当前选中数据库<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2>将已创建的数据库文件夹从磁盘删除,数据库中所有数据将被删除<br><code>drop { database | schema} [if exists] 数据库名</code><br>if exists可以避免数据库不存在时报错</li></ol><h2 id="定义表"><a href="#定义表" class="headerlink" title="定义表"></a>定义表</h2><p>数据表是数据库中最重要,最基本的数据对象,是数据存储的基本单位,若没有表,数据库中的其他数据对象就没有意义</p><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><ol><li>数值类型<img src="/img/MYSQL总笔记/sjlx.png"></li><li>日期类型<img src="/img/MYSQL总笔记/sjlx2.png"></li><li>字符串类型<img src="/img/MYSQL总笔记/sjlx3.png"></li></ol><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>语法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名</span><br><span class="line">(</span><br><span class="line">字段名<span class="number">1</span> 数据类型 [列级完整性约束条件] [默认值]</span><br><span class="line">[, 字段名<span class="number">2</span> 数据类型 [列级完整性约束条件] [默认值] ]</span><br><span class="line">[, ....]</span><br><span class="line">[,表级完整性约束条件]</span><br><span class="line">)[<span class="keyword">engine</span>= 引擎类型];</span><br></pre></td></tr></table></figure><ol><li>创建者必须有表的create权限</li><li><code>[ ]</code>中的参数都是可选参数</li><li>创建多字段必须用逗号隔开,字段名在表中必须唯一</li></ol><h3 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h3><ol><li><p>查看所有表名称<br><code>show tables [{from | in} 数据库名];</code><br>{from | in} 数据库名可以显示非当前数据库中的数据库表名称</p></li><li><p>查看表的基本结构<br>查看表的字段名,字段数据类型,字段值是否允许为空,是否为主键,是否有默认值等<br><code>show columns {from | in} 表名 [{from|in}数据库名];</code><br><code>{describe | desc} 表名;</code></p></li><li><p>查看表的详细结构<br><code>show create table 表名 {; | \G}使用</code>\G`结尾可以使信息更清晰</p></li></ol><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><p>常用:修改字段名或字段数据类型,添加和删除字段,修改字段排练位置,更改表的储存引擎类型,增加和删除表的约束等</p><ol><li><p>添加字段<br>在已有的表中添加字段,可同时添加多个<br><code>alter table 表名 add [column] 新字段名 数据类型  [约束条件] [first | after  已有字段名]</code><br>first表示将字段添加到表的第一个字段<br>after表示添加到指定字段后面一个<br>如果没有这两个参数,默认添加到表的最后一列</p></li><li><p>修改字段<br>change子句:同时修改列名和数据类型,并且可以修改多个(需要逗号隔开)<br><code>alter table 表名 change [column] 原字段名 新字段名 数据类型[约束条件];</code><br>alter子句:修改或删除表中指定列的默认值<br><code>alter table 表名 alter [column] 字段名 {set | drop } default;</code><br>modify子句:修改数据类型或指定列在表中的位置<br><code>alter table 表名 modify [column] 字段名 数据类型 [约束条件] [first | after 已有字段名]</code></p></li><li><p>删除字段<br>在删除列后,原本在该列的数据也会被删除<br><code>alter table 表名 drop [column] 字段名;</code></p></li></ol><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><p><code>alter table 原表名 rename [to] 新表名;</code><br><code>rename  table 原表名1  to 新表名1[,原表名 2  to 新表名2]....;</code><br>rename  table子句可以重命名多个表名</p><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p><code>drop table [if exists ] 表1 [,表2]...;</code><br>可以删除多个表<br>if exists 可以判断表是否存在再删除,避免出错</p><h2 id="数据的完整性约束"><a href="#数据的完整性约束" class="headerlink" title="数据的完整性约束"></a>数据的完整性约束</h2><p>完整性规则是对关系的某种约束条件<br>对关系模型施加完整性约束,则是为了数据库应用中保障数据的正确性和一致性,防止数据库中存在不符合语义的不正确的数据,这也是数据库服务器最重要的功能之一<br>完整性约束既能有效防止对MYSQL数据库的意外破坏和非法存取,又能提高完整性检测的效率,还能减轻MySQL编程人员的工作负担</p><h3 id="定义实体完整性"><a href="#定义实体完整性" class="headerlink" title="定义实体完整性"></a>定义实体完整性</h3><p><strong>通过主键约束和候选键约束实现,主属性不能为空</strong></p><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><ol><li>每个主键的值必须唯一,且不能为null</li><li>每个表只能有一个主键</li><li>复合主键不能包含不必要的多余列</li><li>一个列名在复合主键的列表中只能出现一次</li></ol><p>定义:<br>将字段studentNo定义为主键<br>列级:<br>某个字段后加上关键字primary key<br>例:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_student</span><br><span class="line">(</span><br><span class="line">studentNo <span class="built_in">char</span>(<span class="number">10</span>) primary <span class="keyword">key</span>,</span><br><span class="line">studentName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">birthday <span class="built_in">date</span>,</span><br><span class="line">nation <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">'汉'</span>,</span><br><span class="line">classNo <span class="built_in">char</span>(<span class="number">6</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><p>表级:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_student</span><br><span class="line">(</span><br><span class="line">studentNo <span class="built_in">char</span>(<span class="number">10</span>) ,</span><br><span class="line">studentName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">birthday <span class="built_in">date</span>,</span><br><span class="line">nation <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">'汉'</span>,</span><br><span class="line">classNo <span class="built_in">char</span>(<span class="number">6</span>),</span><br><span class="line">primary <span class="keyword">key</span>(studentNo)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><h4 id="完整性约束的命名"><a href="#完整性约束的命名" class="headerlink" title="完整性约束的命名"></a>完整性约束的命名</h4><p>在<strong>表级完整约束性</strong>前面使用constraint给约束命名<br><code>constraint 约束名字 完整性约束(字段列表)</code></p><h4 id="候选键约束"><a href="#候选键约束" class="headerlink" title="候选键约束"></a>候选键约束</h4><ol><li>候选键可以是某一列,也可以是某些列的组合</li><li>值必须唯一,且不能是null</li></ol><p>定义:<br>与主键约束相似,同样有列级与表级,定义时只是把主键约束的primary key 换成unique即可</p><h3 id="定义参照完整性-外键"><a href="#定义参照完整性-外键" class="headerlink" title="定义参照完整性(外键)"></a>定义参照完整性(外键)</h3><p>参照完整性规则定义的是外键与主键之间的引用规则,既外键的取值或者为空,或者等于被参照关系中的某个主键的值<br>例如有某个年纪的班级列表与某个班级的人员表,学生的班级编号必须是班级列表里已存在的主键值</p><p>注意:</p><ol><li>被参照表必须已创建,或者是当前正在创建,若是后一种,则被参照表与参照表是同一个表,这样的表称为自参照表,这样的结构 ,称为自参照完整性</li><li>必须在被参照表的表名后面指定列名或列名的组合,这个列或列的组合必须是被参照表的主键或候选键</li><li>主键列不能为NULL,但外键可以为空值</li><li>外键对应列的数据类型必须与被参照表的主键对应数据类型相同</li><li>外键只能使用储存引擎InnoDB创建的表中,其他储存引擎不支持外键</li></ol><p>列级方式示例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_student</span><br><span class="line">(</span><br><span class="line">studentNo <span class="built_in">char</span>(<span class="number">10</span>) ,</span><br><span class="line">studentName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">birthday <span class="built_in">date</span>,</span><br><span class="line">nation <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">'汉'</span>,</span><br><span class="line">classNo <span class="built_in">char</span>(<span class="number">6</span>) <span class="keyword">references</span> tb_class(classNo),</span><br><span class="line"><span class="keyword">constraint</span> PK_student primary <span class="keyword">key</span>(studentNo)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><p>该外键定义成功的前提条件是:<br>tb_class表已存在且classNo字段是该表的主键<br>定义完成后tb_student表中classNo的值必须为tb_class表中主键classNo列的值</p><p>表级方式遵循上面规则</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_student</span><br><span class="line">(</span><br><span class="line">studentNo <span class="built_in">char</span>(<span class="number">10</span>) ,</span><br><span class="line">studentName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">birthday <span class="built_in">date</span>,</span><br><span class="line">nation <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">'汉'</span>,</span><br><span class="line">classNo <span class="built_in">char</span>(<span class="number">6</span>) ,</span><br><span class="line"><span class="keyword">constraint</span> PK_student primary <span class="keyword">key</span>(studentNo)</span><br><span class="line"><span class="keyword">constraint</span> Fk_student <span class="keyword">foreign</span> <span class="keyword">key</span>(classNo) <span class="keyword">references</span> tb_class(classNo)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure><p>给外键定义参照动作<br>给外键定义参照动作时，需要包括两部分：一是要指定参照动作适用的语句，即update和delete 语句；二是要指定采取的动作，即 cascade、restrict、set null、no action和setdefault，其中restrict为默认值。具体策略如下：</p><p><code>RESTRICT</code>：限制策略，即当要删除或修改被参照表中被参照列上且在外键中出现的值时，系统拒绝对被参照表的删除或修改操作。<br><code>CASCADE</code>：级联策略，即从被参照表中删除或修改记录时，自动删除或修改参照表中匹配的记录。<br><code>SET NULL</code>：置空策略，即当从被参照表中删除或修改记录时，设置参照表中与之对应的外键列的值为NULL。这个策略需要被参照表中的外键列没有声明限定词NOT NULL。<br><code>NO ACTION</code>：表示不采取实施策略，即当一个相关的外键值在被参照表中时，删除或修改被参照表中键值的动作不被允许。该策略的动作语义与RESTRICT相同。<br><code>SET DEFAULT</code>：默认值策略，即当从被参照表中删除或修改记录行，设置参照表中与之对应的外键列的值为默认值。这个策略要求已经为该列定义了默认值。</p><p>参照动作只需要在定义表时在最后的定义语句之后加上 <code>on 参照动作</code>就可以了</p><h3 id="用户定义的完整性"><a href="#用户定义的完整性" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h3><p>用户定义的完整性规则反应了某一具体应用所涉及的数据应满足的语义要求<br>例如性别不能为空且只能为男或女</p><ol><li><p>非空约束<br>非空约束是指字段的值不能为空,如果用户在添加数据时没有给其指定值,数据库系统就会报错<br>定义方法:在某个列定义时在后面添加 not null即可</p></li><li><p>check约束<br>check约束需要指定限定条件,可以分表级跟列级,列级可以定义单个字段,表级可以定义多个<br>定义:<br><code>check(表达式);</code><br>可以使用简单表达式也可以使用复杂的表达条件作为限定条件,例如子查询</p></li></ol><h3 id="更新完整性约束"><a href="#更新完整性约束" class="headerlink" title="更新完整性约束"></a>更新完整性约束</h3><p>可以使用alter table 语句更新完整性约束</p><h4 id="删除约束"><a href="#删除约束" class="headerlink" title="删除约束"></a>删除约束</h4><ol><li><p>删除外键约束<br><code>alter table 表名 drop foreign key 外键约束名</code><br>如果定义时没有指定外键约束名字可以用show create table语句查看系统给外键约束指定的名字</p></li><li><p>删除主键约束<br><code>alter table 表名 drop primary key;</code><br>因为主键一个表中只能定义一个所以可以不使用名字</p></li><li><p>删除候选键约束<br>删除候选键约束时,实际删除的的唯一性索引,应使用drop index子句删除,若没有给定约束名,MySQL自动将字段名定义成索引名<br><code>alter table 表名 drop index {约束名 | 候选键字段名};</code></p></li></ol><h4 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h4><p>可以使用alter table语句添加完整性约束</p><ol><li><p>添加主键约束<br><code>alter table 表名 add [constraint 约束名] primary key(主键字段);</code></p></li><li><p>添加外键约束<br><code>alter table 表名 add [constraint 约束名] foreign key(外键字段名)  references  被参照表(主键字段名);</code></p></li><li><p>添加候选键约束<br><code>alter table 表名 add [constraint 约束名] unique key(字段名);</code></p></li></ol><h1 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h1>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换系统</title>
      <link href="/2019/08/19/%E6%8D%A2%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/08/19/%E6%8D%A2%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>电脑系统如果崩了，或者你错误的删了一些电脑系统盘里的东西需要换一个系统，去店里得五十块，这个时候如果自己会装系统就可以轻松省下这一笔钱了</p><p>由于网上PE装机教程一抓一大把,所以今天来教一个不一样的：直接将ISO镜像文件写入U盘，写入后直接插u盘可以装系统，不用进入PE，方便至极，而且U盘空余的空间可以存其他东西</p><h1 id="准备材料："><a href="#准备材料：" class="headerlink" title="准备材料："></a>准备材料：</h1><ol><li>一个U盘（4G以上吧）</li><li>软碟通：<br>链接：<a href="https://pan.baidu.com/s/1b_W2bjMQKYMpUGIVq2Sf9Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1b_W2bjMQKYMpUGIVq2Sf9Q</a><br>提取码：vez5 </li><li>一个系统的镜像文件：<br>简体中文版：链接： <a href="https://pan.baidu.com/s/10PnW8lpBZC1niqi0Y1jdyA" target="_blank" rel="noopener">https://pan.baidu.com/s/10PnW8lpBZC1niqi0Y1jdyA</a> 提取码：8lpw<br>简体中文专业版：链接：<a href="https://pan.baidu.com/s/1SD2FEtHUK28CMvlv_eZt1A" target="_blank" rel="noopener">https://pan.baidu.com/s/1SD2FEtHUK28CMvlv_eZt1A</a> 提取243f <pre><code>安装密钥：VK7JG-NPHTM-C97JM-9MPGT-3V66T </code></pre>企业版：链接：<a href="https://pan.baidu.com/s/1pNWag6Qvxb7rBLQDZYQndg" target="_blank" rel="noopener">https://pan.baidu.com/s/1pNWag6Qvxb7rBLQDZYQndg</a> 提取码：lis2</li></ol><p>版本自行选择</p><h1 id="安装软碟通（注册码文件内有"><a href="#安装软碟通（注册码文件内有" class="headerlink" title="安装软碟通（注册码文件内有)"></a>安装软碟通（注册码文件内有)</h1><h1 id="打开系统映像"><a href="#打开系统映像" class="headerlink" title="打开系统映像"></a>打开系统映像</h1><p>双击打开<strong>（因为安装软碟通后设置了文件关联，可以直接打开ISO文件跳至软碟通）</strong><br><img src="/img/装系统/ZXT1.png"><br><img src="/img/装系统/ZXT2.png"></p><h1 id="插入U盘-最少8个g"><a href="#插入U盘-最少8个g" class="headerlink" title="插入U盘(最少8个g)"></a>插入U盘(最少8个g)</h1><h1 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h1><p>点启动里的写入硬盘映像<br><img src="/img/装系统/ZXT3.png"><br>然后点写入<br><img src="/img/装系统/ZXT4.png"></p><p>#</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 必备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java总笔记</title>
      <link href="/2019/08/17/Java%E6%80%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/17/Java%E6%80%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="java运行原理"><a href="#java运行原理" class="headerlink" title="java运行原理"></a>java运行原理</h1><p><strong>java编译器 (编译) → 虚拟机(解释执行) → 解释器(翻译) → 机器码</strong></p><p>Java源程序经过编译器编译后变成字节码，字节码由虚拟机解释执行，虚拟机将每一条要执行的字节码送给解释器，解释器将其翻译成特定机器上的机器码，然后在特定的机器上运行。</p><h2 id="Java虚拟机-JVM"><a href="#Java虚拟机-JVM" class="headerlink" title="Java虚拟机(JVM)"></a>Java虚拟机(JVM)</h2><p>java虚拟机是一个虚构出来的计算机,是通过在实际的计算机上仿真模拟各种计算机功能来模拟实现的</p><p>Java中，类加载器把一个类装入JAVA虚拟机需要经过三个步骤来完成：<strong>装载、链接、初始化</strong>，其中链接又分来校验、准备、解析过程</p><ol><li><p>装载：查找和导入.class文件</p></li><li><p>链接：检查装入.class文件的正确性，然后，java虚拟机为变量分配内存，设置默认值</p></li><li><p>初始化：把符号引用变成直接引用</p></li></ol><hr><h1 id="Java程序设计环境"><a href="#Java程序设计环境" class="headerlink" title="Java程序设计环境"></a>Java程序设计环境</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong>下载jdk</strong><br>链接：<a href="https://pan.baidu.com/s/158xbJW96bKMMVxGtU7cB8w" target="_blank" rel="noopener">https://pan.baidu.com/s/158xbJW96bKMMVxGtU7cB8w</a><br>提取码：r1u9 </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><img src="/img/java总笔记/JDK1.png">**狂点下一步**安装到默认的C:\Program Files\Java\jdk1.8.0_131目录<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ol><li><p><strong>此电脑-&gt;右键,属性</strong></p></li><li><p><strong>-&gt;左上角列表,高级系统设置-&gt;</strong></p><img src="/img/java总笔记/HJ1.png"></li><li><p><strong>环境变量-&gt;</strong></p><img src="/img/java总笔记/HJ2.png"></li><li><p><strong>下方系统变量-&gt;选择Path变量-&gt;编辑</strong></p><img src="/img/java总笔记/HJ3.png"></li><li><p><strong>-&gt;新建</strong></p></li></ol><p><strong>-&gt;将jdk的bin目录路径C:\Program Files\Java\jdk1.8.0_131\bin复制到目录</strong><br><img src="/img/java总笔记/HJ4.png"></p><ol start="6"><li><strong>全部按确定,直至退出</strong></li></ol><h2 id="检查环境是否配置完成"><a href="#检查环境是否配置完成" class="headerlink" title="检查环境是否配置完成"></a>检查环境是否配置完成</h2><p>在命令行中检查环境变量是否配置成功<br>在cmd中输入Java回车出现如下信息<br><img src="/img/java总笔记/HJ5.png"><br>在cmd中输入Javac回车出现如下信息<br><img src="/img/java总笔记/HJ6.png"><br>配置完成</p><h2 id="JAVA-HOME"><a href="#JAVA-HOME" class="headerlink" title="JAVA_HOME"></a>JAVA_HOME</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h3><ol><li><p>为了方便引用<br>比如，你JDK安装在C:\ProgramFiles\Java\jdk1.7.0目录里，则设置JAVA_HOME为该目录路径, 那么以后你要使用这个路径的时候, 只需输入%JAVA_HOME%即可,避免每次引用都输入很长的路径串;</p></li><li><p>归一原则<br>当你JDK路径被迫改变的时候, 你仅需更改JAVA_HOME的变量值即可, 否则,你就要更改任何用绝对路径引用JDK目录的文档</p></li><li><p>第三方软件会引用约定好的JAVA_HOME变量, 不然, 你将不能正常使用该软件,</p></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>在系统变量中新建一个JAVA_HOME变量,值是jdk的目录,<strong>注意:是jdk的目录,不是jdk里面的bin目录</strong>若是以后安装其他版本的jdk,直接添加jdk的目录至JAVA_HOME即可<br><code>C:\Program Files\Java\jdk1.8.0_131</code><img src="/img/java总笔记/HJ8.png"><img src="/img/java总笔记/HJ7.png"></li><li>在Path变量里面新建一个值,值是<code>%JAVA_HOME%\bin</code>(也表示jdk里面的bin目录)<img src="/img/java总笔记/HJ9.png"></li></ol><hr><h1 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h1><h2 id="命令行编译Java程序"><a href="#命令行编译Java程序" class="headerlink" title="命令行编译Java程序"></a>命令行编译Java程序</h2><ol><li><p>进入D盘或者其他文件夹</p></li><li><p>在这个目录新建一个Hello.txt的文本文档</p></li><li><p>输入下面代码</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hello</span>&#123;<span class="comment">//文件名与文件名一致</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"你好,世界!"</span>);<span class="comment">//注意大小写</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>把后缀名改为<strong>.java</strong></p><img src="/img/java总笔记/DYJAVA2.png"></li><li><p>打开cmd</p></li></ol><p>可以直接在文件路径那里输入cmd可以直接在命令行中进入此文件夹<br><img src="/img/java总笔记/DYJAVA3.png"></p><ol start="6"><li>打开后输入Javac Hello.java按回车</li></ol><p>输入Java Hello</p><p>得到 “你好,世界”</p><p>第一个Java程序运行完成</p><h2 id="eclipse集成开发环境"><a href="#eclipse集成开发环境" class="headerlink" title="eclipse集成开发环境"></a>eclipse集成开发环境</h2><ol><li><p>打开此文件夹(已汉化)</p><img src="/img/java总笔记/DYJAVA4.png"></li><li><p>双击eclipse.exe</p><img src="/img/java总笔记/DYJAVA5.png"></li><li><p>选择一个工作空间,保存以后的Java项目</p></li><li><p>点击文件,新建,Java项目</p><img src="/img/java总笔记/DYJAVA6.png"></li><li><p>在项目src文件夹里右键新建包,起个名字,包名所有字母小写</p><img src="/img/java总笔记/DYJAVA7.png"><img src="/img/java总笔记/DYJAVA8.png"></li><li><p>在新建的包右键点击,新建类,自动完成以下代码</p><img src="/img/java总笔记/DYJAVA9.png"></li><li><p>将前面的代码填充到代码区</p><img src="/img/java总笔记/DYJAVA11.png"></li><li><p>按ctrl+F11就可以运行<br>在下方控制台窗口就可以看到输出了</p><img src="/img/java总笔记/DYJAVA10.png"></li></ol><hr><h1 id="java的基本程序设计结构"><a href="#java的基本程序设计结构" class="headerlink" title="java的基本程序设计结构"></a>java的基本程序设计结构</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>有三种注释:单行注释,多行注释与文档注释</p><ol><li>单行注释//,最常用的注释其注释内容从 // 开始到本行结尾。 </li><li>多行注释 从<code>/*</code>开始直至第一个<code>*/</code>出现都属于多行注释,但多行注释不能嵌套,多行注释也可以注释掉不需要的代码</li><li>文档注释 可以自动地生成文档,这种注释以<code>/**</code>开始,以<code>*/</code>结束<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这就是传说中的多行注释</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 作者</span></span><br><span class="line"><span class="comment"> *可以自动生成文档</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"你好"</span>);<span class="comment">//这是单行注释</span></span><br><span class="line"><span class="comment">/*  System.out.println("你好");</span></span><br><span class="line"><span class="comment">System.out.println("你好");</span></span><br><span class="line"><span class="comment">这里都是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>在 Java 中， -共有 8 种基本类型（primitive type), 其中有 4 种整型、2 种浮点类型、 1 种用于表示 Unicode编码的字符 单元的字符类型 char和 1 种用于表示真值的 boolean类型</p><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>整型用于表示没有小数部分的数值,它允许是负数</p><table><thead><tr><th align="center">类型</th><th align="center">储存需求</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">4字节</td><td align="center">-2147483648-2147483647 (正好超过 20亿)</td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center">-32768-32767</td></tr><tr><td align="center">long</td><td align="center">8字节</td><td align="center">-9223372036854775808-9223372036854775807</td></tr><tr><td align="center">byte</td><td align="center">1字节</td><td align="center">-127-127</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> INT = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">short</span> SHORT = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">long</span> LONG= <span class="number">8</span>;</span><br><span class="line"><span class="keyword">byte</span> BYTE=<span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">"int类型占用"</span>+INT+<span class="string">"字节"</span>);</span><br><span class="line">System.out.println(<span class="string">"short类型占用"</span>+SHORT+<span class="string">"字节"</span>);</span><br><span class="line">System.out.println(<span class="string">"LONG类型占用"</span>+LONG+<span class="string">"字节"</span>);</span><br><span class="line">System.out.println(<span class="string">"bate类型占用"</span>+ BYTE +<span class="string">"字节"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">int类型占用<span class="number">4</span>字节</span><br><span class="line">short类型占用<span class="number">2</span>字节</span><br><span class="line">LONG类型占用<span class="number">8</span>字节</span><br><span class="line">bate类型占用<span class="number">1</span>字节</span><br></pre></td></tr></table></figure><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>浮点类型用于表示有小数部分的数值,在 Java中有两种浮点类型<br>类型|储存需求|取值范围<br>—|:—:|—<br>float|4字节|大约 ± 3.402 82347E+38F (有效位数为 6 ~ 7 位）<br>double|8字节|大约 ± 1.797693 134862315 70E+308 (有效位数为 15 位)</p><p>double 表示这种类型的数值精度是 float 类型的两倍（有人称之为双精度数值)。绝大部分应用程序都采用double 类型</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">float</span> FAULT = <span class="number">3.1415926F</span>;<span class="comment">//数值后</span></span><br><span class="line"><span class="keyword">double</span> DOUBLE = <span class="number">3.1415926</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"float类型:"</span>+FAULT);<span class="comment">//最多7位</span></span><br><span class="line">System.out.println(<span class="string">"double类型:"</span>+DOUBLE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>char 类型原本用于表示单个字符。不过，现在情况已经有所变化如今有些 Unicode 字符可以用一个 chai值描述，另外一些 Unicode 字符则需要两个 char 值</p><p>char类型占两个字节</p><p>char类型的字面量值要用单引号括起来<br>特殊字符转义序列</p><table><thead><tr><th align="center">转义序列</th><th align="center">名称</th><th align="center">Unicode值</th></tr></thead><tbody><tr><td align="center">\b</td><td align="center">退格</td><td align="center">\u0008</td></tr><tr><td align="center">\t</td><td align="center">制表符</td><td align="center">\u0009</td></tr><tr><td align="center">\n</td><td align="center">换行</td><td align="center">\u000a</td></tr><tr><td align="center">\r</td><td align="center">回车</td><td align="center">\u000d</td></tr><tr><td align="center">&quot;</td><td align="center">双引号</td><td align="center">\u0022</td></tr><tr><td align="center">&#39;</td><td align="center">单引号</td><td align="center">\u0027</td></tr><tr><td align="center">\</td><td align="center">反斜杠</td><td align="center">\u005c</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">char</span> b = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'男'</span>;<span class="comment">//单个汉字也可以存为char类型</span></span><br><span class="line"><span class="keyword">char</span> d = <span class="string">'\t'</span>;<span class="comment">//制表符相当于按tab键</span></span><br><span class="line">System.out.print(a);</span><br><span class="line">System.out.print(b);</span><br><span class="line">System.out.print(d);</span><br><span class="line">System.out.print(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><code>1A    男</code></p><p>Boolean类型<br>boolean (布尔）类型有两个值：false 和 true,用来判定逻辑条件整型值和布尔值之间不能进行相互转换,这点不同于c语言</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量声明语法:<br>`数据类型 变量名 [= 变量值];’<br>变量名遵循以下规则:</p><ol><li>首字符必须是字母、下划线（―）、美元符号（$）或者人民币符号（¥）。</li><li>标识符由数字（0<del>9）、大写字母（A</del>Z）、小写字母（a~z）、下划线（―）、美元符号（$）、人民币符号（¥）以及所有在十六进制 0xc0 前的 ASCII 码组成。</li><li>不能把关键字、保留字作为标识符。</li><li>标识符的长度没有限制。</li><li>标识符区分大小写。</li></ol><p>变量声明可以一行声明多个变量<br><code>int i , j;//一行声明i和j两个变量</code><br><strong>不过不提倡,使用这种风格,逐一声明一个变量可以提高程序的可读性</strong></p><p>变量的初始化<br>可以先声明后初始化<br><code>int i;</code><br><code>i=8</code><br>也可以声明的时候初始化<br><code>int i = 8;</code></p><p><strong>在Java中,变量的声明尽量靠近第一次使用的地方,这是一种良好的程序编写风格</strong></p><h2 id="常量值"><a href="#常量值" class="headerlink" title="常量值"></a>常量值</h2><p>常量值又称为字面常量，它是通过数据直接表示的</p><h3 id="整型常量值"><a href="#整型常量值" class="headerlink" title="整型常量值:"></a>整型常量值:</h3><ol><li>十进制数形式：如 54、-67、0。</li><li>八进制数形式：Java 中的八进制常数的表示以 0 开头，如 0125 表示十进制数 85，-013 表示十进制数 -11。</li><li>十六进制数形式：Java 中的十六进制常数的表示以 0x 或 0X 开头，如 0x100 表示十进制数 256，-0x16 表示十进制数 -22。</li></ol><h3 id="实型常量值"><a href="#实型常量值" class="headerlink" title="实型常量值:"></a>实型常量值:</h3><ol><li>十进制数形式：由数字和小数点组成，且必须有小数点，如 12.34、-98.0。</li><li>科学记数法形式：如 1.75e5 或 32&amp;E3，其中 e 或 E 之前必须有数字，且 e 或 E 之后的数字必须为整数。</li></ol><h3 id="布尔型常量值"><a href="#布尔型常量值" class="headerlink" title="布尔型常量值"></a>布尔型常量值</h3><p>Java 的布尔型常量只有两个值，即 false（假）和 true（真）。</p><h3 id="字符型和字符串常量值"><a href="#字符型和字符串常量值" class="headerlink" title="字符型和字符串常量值"></a>字符型和字符串常量值</h3><p>Java 的字符型常量值是用单引号引起来的一个字符，如 ‘e’、E’。需要注意的是，Java 字符串常量值中的单引号和双引号不可混用。双引号用来表示字符串，像 “11”、”d” 等都是表示单个字符的字符串。</p><h3 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h3><p>java中,利用关键字 final 指示常量<br><code>final double ZHONG=3.1415;</code><br>关键字final表示这个变量只能被赋值一次,一旦被赋值后就不能再更改了<br><strong>习惯上,常量名使用全大写</strong></p><h3 id="数据类型之间的转换"><a href="#数据类型之间的转换" class="headerlink" title="数据类型之间的转换"></a>数据类型之间的转换</h3><p>自动类型转换:<br>当使用上面两个数值进行二元操作时（例如 n + f，n 是整数，f 是浮点数)， 先要将两个<br>操作数转换为同一种类型，然后再进行计算。</p><ol><li>如果两个操作数中有一个是 double 类型， 另一个操作数就会转换为 double 类型。</li><li>否则，如果其中一个操作数是 float 类型，另一个操作数将会转换为 float 类型。 </li><li>否则， 如果其中一个操作数是 long 类型， 另一个操作数将会转换为 long 类型。</li><li>否则， 两个操作数都将被转换为 int 类型。 </li></ol><p>强制类型转换<br>语法:`(目标类型)待转换变量名’ </p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符按照操作数的数量可以分为单目运算符、双目运算符和三目运算符。<br>最基本的运算符包括算术运算符、赋值运算符、逻辑运算符和关系运算符等<br>算术运算符都是双目运算符，即连接两个操作数的运算符。优先级上，*、/、％ 具有相同运算级别，并高于 +、-（+、- 具有相同级别）。</p><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>注意点:</p><ol><li>求余（％）运算要求参与运算的两个操作数均为整型，不能为其他类型。</li><li>两个整数进行除法运算，其结果仍为整数。如果整数与实数进行除法运算，则结果为实数。</li><li>Java 语言算术运算符的优先级是先乘除后加减</li></ol><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>语法:<code>变量名称=表达式内容</code><br>赋值运算符的优先级低于算术运算符，结合方向是自右向左<br>不要将赋值运算符与相等运算符“==”混淆。</p><p>赋值运算符和算数运算符组成的复合赋值运算</p><table><thead><tr><th align="center">运算符</th><th align="center">含义</th><th align="center">实例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">+=</td><td align="center">将该运算符左边的数值加上右边的数值,其结果赋值给左边变量本身</td><td align="center">int a=5;a+=2;</td><td align="center">a=7</td></tr><tr><td align="center">-=</td><td align="center">将该运算符左边的数值减去右边的数值,其结果赋值给左边变量本身</td><td align="center">int a=5;a-=2;</td><td align="center">a=3</td></tr><tr><td align="center">*=</td><td align="center">将该运算符左边的数值乘以右边的数值,其结果赋值给左边变量本身</td><td align="center">int a=5;a*=2;</td><td align="center">a=10</td></tr><tr><td align="center">/=</td><td align="center">将该运算符左边的数值整除右边的数值,其结果赋值给左边变量本身</td><td align="center">int a=5;a/=2;</td><td align="center">a=2</td></tr><tr><td align="center">%=</td><td align="center">将该运算符左边的数值除以右边的数值后取余,其结果赋值给左边变量本身</td><td align="center">int a=5; a%=2;</td><td align="center">a=1</td></tr></tbody></table><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符是二元运算符，运算结果是 boolean 型。当运算符对应的关系成立时，运算结果是 true，否则是 false。</p><table><thead><tr><th align="center">运算符</th><th align="center">含义</th><th align="center">实例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于运算符</td><td align="center">2&gt;3</td><td align="center">false</td></tr><tr><td align="center">&gt;=</td><td align="center">大于或等于运算符</td><td align="center">4&gt;=2</td><td align="center">true</td></tr><tr><td align="center">&lt;</td><td align="center">小于运算符</td><td align="center">2&lt;3</td><td align="center">true</td></tr><tr><td align="center">&lt;=</td><td align="center">小于或等于运算符</td><td align="center">4&lt;=2</td><td align="center">false</td></tr><tr><td align="center">==</td><td align="center">相等运算符</td><td align="center">4==4</td><td align="center">true</td></tr><tr><td align="center">!=</td><td align="center">不相等运算符</td><td align="center">4!=2</td><td align="center">true</td></tr></tbody></table><p>关系运算符的优先级为：&gt;、&lt;、&gt;=、&lt;= 具有相同的优先级，并且高于具有相同优先级的 !=、==。关系运算符的优先级高于赋值运算符而低于算术运算符，结合方向是自左向右。</p><p>关系表达式通常用于 Java 程序的逻辑判断语句的条件表达式中<br><strong>注意点:</strong></p><ol><li>运算符 &gt;=、==、！=、&lt;= 是两个字符构成的一个运算符，用空格从中分开写就会产生语法错误。例如 x&gt; =y; 是错误的，但是可以写成 x&gt;=y; 在运算符的两侧增加空格会提高可读性。同样将运算符写反，例如 =&gt;、=&lt;、=! 等形式会产生语法错误。</li><li>由于计算机内存放的实数与实际的实数存在着一定的误差，如果对浮点数进行 ==（相等）或 !=（不相等）的比较，容易产生错误结果，应该尽量避免。</li><li>不要将“==”写成“=”。</li></ol><h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><p>++ 或 – 是单目运算符，放在操作数的前面或后面都是允许的。++ 与 – 的作用是使变量的值增 1 或减 1。操作数必须是一个整型或浮点型变量。</p><table><thead><tr><th align="center">运算符</th><th align="center">含义</th><th align="center">实例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">i++</td><td align="center">将 i 的值先使用再加1赋值给i变量本身</td><td align="center">int i=1;int j=i++;</td><td align="center">i=2 j=1</td></tr><tr><td align="center">++i</td><td align="center">将 i 的值先加1赋值给变量i本身后再使用</td><td align="center">int i=1;int j=++i;</td><td align="center">i=2 j=2</td></tr><tr><td align="center">i--</td><td align="center">将 i 的值先使用再减1赋值给变量i本身</td><td align="center">int i=1;int j=i--;</td><td align="center">i=0 j=1</td></tr><tr><td align="center">--i</td><td align="center">将 i 的值先减1后赋值给变量 i 本身再使用</td><td align="center">int i=1;int j=--i;</td><td align="center">i=0 j=0</td></tr></tbody></table><p><strong>注意点:</strong></p><ol><li>自增/自减只能作用于变量，不允许对常量、表达式或其他类型的变量进行操作。常见的错误是试图将自增或自减运算符用于非简单变量表达式中。</li><li>自增/自减运算可以用于整数类型 byte、short、int、long，浮点类型 float、double，以及字符串类型 char。</li><li>在 Java 1.5 以上版本中，自增/自减运算可以用于基本类型对应的包装器类 Byte、Short、Integer、Long、Float、Double 和 Character。</li><li>自增/自减运算结果的类型与被运算的变量类型相同。</li><li>建议不要在表达式中使用++, 因为这样的代码很容易让人困惑，而且会带来烦人的 bug</li></ol><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符包括 &amp;&amp;、||、！。其中 &amp;&amp; 和 || 是双目运算符，实现逻辑与、逻辑或；！是单目运算符，实现逻辑非</p><p>逻辑运算符的优先级为：！运算级别最高，&amp;&amp; 运算高于 || 运算。！运算符的优先级高于算术运算符，而 &amp;&amp; 和 || 运算则低于关系运算符。结合方向是：逻辑非（单目运算符）具有右结合性，逻辑与和逻辑或（双目运算符）具有左结合性。</p><table><thead><tr><th align="center">运算符</th><th align="center">用法</th><th align="center">含义</th><th align="center">结合方向</th><th align="center">实例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">op1&amp;&amp;op2</td><td align="center">逻辑与</td><td align="center">自左到右</td><td align="center">2&gt;1&amp;&amp;3&lt;4</td><td align="center">true</td></tr><tr><td align="center">||</td><td align="center">op1||op2</td><td align="center">逻辑或</td><td align="center">自左到右</td><td align="center">2&lt;1||3&gt;4</td><td align="center">false</td></tr><tr><td align="center">!</td><td align="center">!op</td><td align="center">逻辑非</td><td align="center">自右到左</td><td align="center">!(2&gt;4)</td><td align="center">true</td></tr></tbody></table><hr><h1 id="JAVA多线程"><a href="#JAVA多线程" class="headerlink" title="JAVA多线程"></a>JAVA多线程</h1><p>实现多线程有两种方式,一种是继承Thread类,另一种是实现Raunnable</p><p>##继承Thread<br>Thread类在Java.lang包中定义,一个类只继承Thread类,此类就称为多线程操作类 </p><p>在Thread子类中必须明确地覆写Thread类中的run()方法,此方法为线程的主体<br>定义语法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名称 <span class="keyword">extends</span> <span class="title">Thread</span>类</span>&#123; <span class="comment">//继承Thread类</span></span><br><span class="line">属性...;   <span class="comment">//类中定义方法</span></span><br><span class="line">方法...;   <span class="comment">//类中定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;   <span class="comment">//覆写Thread类中的run()方法,此方法是线程的主体</span></span><br><span class="line">        线程主体;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动多线程需要使用从Thread类中继承而来的start()方法</p><p><strong>若通过Thread类实现多线程,那么只能调用一次start()方法,若调用多次,则会抛出”IllegalThreadStateException”异常</strong></p><p>通过在 run() 方法前加 synchronized 关键字，使多个线程在执行 run() 方法时，以排队的方式进行处理<br><code>synchronized public void run()</code></p><p>通过this关键字可以指定当前线程的变量</p><h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名称 <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123; <span class="comment">//实现Runnable接口</span></span><br><span class="line">属性...;         <span class="comment">//类中定义属性</span></span><br><span class="line">方法...;                         <span class="comment">//类中定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;             <span class="comment">//覆写Runnable接口中的run()方法</span></span><br><span class="line">线程主体;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要启动实现了Runnable接口的多线程,必须靠Thread类完成启动</p><p>Thread类提供了两个构造方法:public Thread(Runnable target)和public Thread(Runnable target,String name)两个构造方法</p><p>具体实现方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">"线程+i="</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A(<span class="string">"A"</span>);</span><br><span class="line">        A b = <span class="keyword">new</span> A(<span class="string">"B"</span>);</span><br><span class="line">        Thread c = <span class="keyword">new</span> Thread(a);</span><br><span class="line">        Thread d = <span class="keyword">new</span> Thread(b);</span><br><span class="line">        c.start();</span><br><span class="line">        d.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thread类和Runnable接口"><a href="#Thread类和Runnable接口" class="headerlink" title="Thread类和Runnable接口"></a>Thread类和Runnable接口</h2><p>Thread类也是Runable接口的子类</p><p>如果一个类继承Thread类,则不适合于多个线程共享资源,而实现了Ruanable接口,就可以方便地实现资源共享</p><p>实现Runnable接口相当于继承Thread类来说,有以下显著优势:</p><ol><li>适合多个相同程序代码的线程去处理同一资源的情况</li><li>可以避免由于Java的单继承特性带来的局限</li><li>增强了程序的健壮性,代码能够被多个线程共享,代码与数据是独立的</li></ol><p><strong>建议在开发中使用Runnable接口实现多线程</strong></p><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>任何线程有五种状态:创建,就绪,运行,阻塞,终止</p><h3 id="创建状态"><a href="#创建状态" class="headerlink" title="创建状态"></a>创建状态</h3><p>在程序中用构造方法创建了一个线程对象后，新的线程对象便处于新建状态，此时，它已经有了相应的内存空间和其他资源，但还处于不可运行状态。新建一个线程对象可采用Thread类的构造方法来实现，例如<code>&quot;Thread thread=new Thread();&quot;</code></p><h3 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h3><p>新建线程对象后，调用该线程的start）方法就可以启动线程。当线程启动时，线程进入就绪状态。此时，线程将进入线程队列排队，等待CPU服务，这表明它已经具备了运行条件。</p><h3 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h3><p>当就绪状态的线程被调用并获得处理器资源时，线程就进入了运行状态。此时，自动调用该线程对象的run()方法。run()方法定义了该线程的操作和功能。</p><h3 id="堵塞状态"><a href="#堵塞状态" class="headerlink" title="堵塞状态"></a>堵塞状态</h3><p>一个正在执行的线程在某些特殊情况下，如被人为挂起或需要执行耗时的输入/输出操作时，将让出CPU并暂时中止自己的执行，进入堵塞状态。在可执行状态下，如果调用sleep()、suspend()、wait()等方法，线程都将进入堵塞状态。堵塞时，线程不能进入排队队列，只有当引起堵塞的原因被消除后，线程才可以转入就绪状态。</p><h3 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h3><p>线程调用stop()方法时或run()方法执行结束后，即处于死亡状态。处于死亡状态的线程不具有继续运行的能力。</p><p><strong>一旦线程进入可执行状态，它会在就绪状态与运行状态下辗转，同时也可能进入等待状态、休眠状态、阻塞状态或死亡状态</strong></p><h2 id="线程操作相关方法"><a href="#线程操作相关方法" class="headerlink" title="线程操作相关方法"></a>线程操作相关方法</h2><table><thead><tr><th align="center">方法名称</th><th align="center">返回值类型</th><th>描述</th></tr></thead><tbody><tr><td align="center">Thread(Runnable target)</td><td align="center">构造</td><td>接收Runnable接口子类对象，实例化Thread 对象</td></tr><tr><td align="center">Thread(Runnable target,String name)</td><td align="center">构造</td><td>接收Runnable接口子类对象，实例化Thread对象，并设置线程名称</td></tr><tr><td align="center">Thread(String name)</td><td align="center">构造</td><td>实例化Thread对象，并设置线程名称</td></tr><tr><td align="center">currentThread()</td><td align="center">Thread</td><td>返回目前正在执行的线程</td></tr><tr><td align="center">getName()</td><td align="center">String</td><td>返回线程的名称</td></tr><tr><td align="center">getPriority()</td><td align="center">int</td><td>返回线程的优先级</td></tr><tr><td align="center">isInterrupted()</td><td align="center">boolean</td><td>判断目前线程是否被中断,如果是,回true,否则返回false</td></tr><tr><td align="center">isAlive()</td><td align="center">void</td><td>判断线程是否在活动,如果是,回true,否则返回false</td></tr><tr><td align="center">join() throws InterruptedException</td><td align="center">void</td><td>等待线程死亡</td></tr><tr><td align="center">join(long millis) throws InterruptedException</td><td align="center">void</td><td>等待millis毫秒后,线程死亡</td></tr><tr><td align="center">run()</td><td align="center">void</td><td>执行线程</td></tr><tr><td align="center">setName(String name)</td><td align="center">void</td><td>设定线程名称</td></tr><tr><td align="center">setPriority(int newPriority)</td><td align="center">void</td><td>设定线程的优先值</td></tr><tr><td align="center">sleep(long millis)throws InterruptedException</td><td align="center">void</td><td>使目前正在执行的线程休眠millis毫秒</td></tr><tr><td align="center">start()</td><td align="center">void</td><td>开始执行线程</td></tr><tr><td align="center">toString()</td><td align="center">String</td><td>返回代表线程的字符串</td></tr><tr><td align="center">yield()</td><td align="center">void</td><td>将正在执行的线程暂停,允许其他线程执行</td></tr><tr><td align="center">setDaemon(boolean on)</td><td align="center">void</td><td>将一个线程设置成后台允许</td></tr></tbody></table><p><strong>Java程序每次运行至少启动两个线程</strong></p><h3 id="取得和设置线程名称"><a href="#取得和设置线程名称" class="headerlink" title="取得和设置线程名称"></a>取得和设置线程名称</h3><p>取得:<strong>getName()</strong><br>设置:<strong>setName(String name)</strong><br>系统自动设置线程名称 <code>new Thread(my).start</code> 系统分配一个名称,格式<code>Thread-Xx</code><br>运行时设置 <code>new Thread(my,&quot;name&quot;).start</code></p><h3 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h3><p>通过<strong>interrupt()</strong>方法中断其运行状态</p><h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><p>通过sleep(long millis)方法,需要异常处理</p><pre><code class="java"><span class="keyword">try</span>{    Thread.sleep(<span class="number">500</span>);<span class="comment">//线程休眠</span>}<span class="keyword">catch</span>(Exception e){}<span class="comment">//异常处理</span></code></pre><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><table><thead><tr><th>定义</th><th align="center">描述</th><th align="center">表示的常量</th></tr></thead><tbody><tr><td>public static final int MIN_PRIORITY</td><td align="center">最低优先级</td><td align="center">1</td></tr><tr><td>public static final int NORM_PRIORITY</td><td align="center">中等优先级,线程默认优先级</td><td align="center">5</td></tr><tr><td>public static final int MAX_PRIORITY</td><td align="center">最高优先级</td><td align="center">10</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL语句总结</title>
      <link href="/2019/08/14/MySQL%E8%AF%AD%E5%8F%A5%E6%80%BB%E7%BB%93/"/>
      <url>/2019/08/14/MySQL%E8%AF%AD%E5%8F%A5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h4 id="通过DOS窗口输入命令"><a href="#通过DOS窗口输入命令" class="headerlink" title="通过DOS窗口输入命令:"></a>通过DOS窗口输入命令:</h4><p><code>mysql -u root -p 回车后输入root的密码</code></p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库:"></a>创建数据库:</h4><p><code>create database 数据库名;</code></p><h4 id="创建数据库的同时指明数据库的字符集和校队规则"><a href="#创建数据库的同时指明数据库的字符集和校队规则" class="headerlink" title="创建数据库的同时指明数据库的字符集和校队规则"></a>创建数据库的同时指明数据库的字符集和校队规则</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">create database 数据库名</span><br><span class="line">default character <span class="builtin-name">set</span> 字符集名称</span><br><span class="line">default collate 校对规则名称;</span><br></pre></td></tr></table></figure><h4 id="查看指定数据库默认字符集和校对规则"><a href="#查看指定数据库默认字符集和校对规则" class="headerlink" title="查看指定数据库默认字符集和校对规则"></a>查看指定数据库默认字符集和校对规则</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(查看默认字符集) :<span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> ‘<span class="built_in">character</span>%’;</span><br><span class="line">查看默认校对规则):<span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> ‘<span class="keyword">collation</span>%’;</span><br></pre></td></tr></table></figure><h4 id="修改数据库的字符集和校对规则"><a href="#修改数据库的字符集和校对规则" class="headerlink" title="修改数据库的字符集和校对规则"></a>修改数据库的字符集和校对规则</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">alter database 数据库名</span><br><span class="line">default character <span class="builtin-name">set</span> 字符集名称</span><br><span class="line">default collate  校对规则名;</span><br></pre></td></tr></table></figure><h4 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h4><p><code>show databases;</code></p><h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><p><code>use 数据库名;</code></p><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p><code>drop database 数据库名称;</code></p><h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><h4 id="创建数据库中的表"><a href="#创建数据库中的表" class="headerlink" title="创建数据库中的表"></a>创建数据库中的表</h4><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">create <span class="keyword">table</span> 表名(</span><br><span class="line">列名<span class="number">1</span> 数据类型,</span><br><span class="line">列名<span class="number">2</span> 数据类型</span><br><span class="line">....</span><br><span class="line">列名 n 数据类型);</span><br></pre></td></tr></table></figure><h4 id="查看表的名称"><a href="#查看表的名称" class="headerlink" title="查看表的名称"></a>查看表的名称</h4><p><code>show table;</code></p><h4 id="查看表的结构"><a href="#查看表的结构" class="headerlink" title="查看表的结构"></a>查看表的结构</h4><p><code>desc 表名;</code></p><h4 id="查看表的详细结构"><a href="#查看表的详细结构" class="headerlink" title="查看表的详细结构"></a>查看表的详细结构</h4><p><code>show create table 表名\G</code></p><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p><code>drop table 表名;</code></p><h4 id="修改表的名称"><a href="#修改表的名称" class="headerlink" title="修改表的名称"></a>修改表的名称</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 旧表名 <span class="keyword">rename</span> 新表名;</span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> 旧表名 <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure><h4 id="增加表的字段"><a href="#增加表的字段" class="headerlink" title="增加表的字段"></a>增加表的字段</h4><p><code>alter table 表名 add 列名 数据类型 [first \ after 已有的列名];</code></p><h4 id="删除表的字段"><a href="#删除表的字段" class="headerlink" title="删除表的字段"></a>删除表的字段</h4><p><code>alter table 表名 drop 字段名;</code></p><h4 id="修改-表中的数据类型及字段顺序"><a href="#修改-表中的数据类型及字段顺序" class="headerlink" title="修改 表中的数据类型及字段顺序"></a>修改 表中的数据类型及字段顺序</h4><p><code>alter table 表名 modify 列名 数据类型 [first \ after 已有列名];</code></p><h4 id="修改表中的列名"><a href="#修改表中的列名" class="headerlink" title="修改表中的列名"></a>修改表中的列名</h4><p><code>alter table 表名 change 原列名 新列名 数据类型;</code></p><h4 id="同时修改列名与数据类型"><a href="#同时修改列名与数据类型" class="headerlink" title="同时修改列名与数据类型"></a>同时修改列名与数据类型</h4><p><code>alter table 表名 change 原列名 新列名 新数据类型;</code></p><h4 id="修改表的其他选项"><a href="#修改表的其他选项" class="headerlink" title="修改表的其他选项"></a>修改表的其他选项</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">储存引擎:alter table 表名 <span class="attribute">engine</span>=新储存引擎;</span><br><span class="line">字符集:alter table 表名<span class="built_in"> default </span>charset =新字符集;</span><br><span class="line">自增字段初始值:alter table 表名 <span class="attribute">auto_increment</span>=新初始值;</span><br></pre></td></tr></table></figure><h1 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h1><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><h5 id="列级-定义表时"><a href="#列级-定义表时" class="headerlink" title="列级 (定义表时)"></a>列级 (定义表时)</h5><p><code>列名 数据类型 primary  key,</code></p><h5 id="表级"><a href="#表级" class="headerlink" title="表级"></a>表级</h5><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">表中所以字段定义后添加<span class="selector-tag">primary</span> <span class="selector-tag">key</span>(列名<span class="number">1</span>,列名<span class="number">2</span>...)</span><br><span class="line">定义约束名字<span class="selector-pseudo">:constraint</span> 约束名字 <span class="selector-tag">primary</span> <span class="selector-tag">key</span>(列名<span class="number">1</span>,.列名n)</span><br></pre></td></tr></table></figure><h5 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束:"></a>添加主键约束:</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> primary <span class="keyword">key</span> (列名<span class="number">1.</span>.列名n);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 约束名字 primary <span class="keyword">key</span>(字段名<span class="number">1</span>,....字段名n);</span><br></pre></td></tr></table></figure><h5 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h5><p><code>alter table 表名 drop primary key;</code></p><h4 id="创建唯一-候选键-约束"><a href="#创建唯一-候选键-约束" class="headerlink" title="创建唯一(候选键)约束"></a>创建唯一(候选键)约束</h4><h5 id="列级-定义表时-1"><a href="#列级-定义表时-1" class="headerlink" title="列级(定义表时)"></a>列级(定义表时)</h5><p><code>字段名 数据类型 unique,</code></p><h5 id="表级-1"><a href="#表级-1" class="headerlink" title="表级"></a>表级</h5><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">unique(字段名<span class="number">1</span>,字段名<span class="number">2.</span>...)</span><br><span class="line">constraint 约束名 unique (字段名<span class="number">1</span>,字段名<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="候选键约束"><a href="#候选键约束" class="headerlink" title="候选键约束"></a>候选键约束</h4><h5 id="添加候选键"><a href="#添加候选键" class="headerlink" title="添加候选键"></a>添加候选键</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">unique</span> (列名<span class="number">1</span>,..列名n);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">constraint</span> 约束名字 <span class="keyword">unique</span> (列名<span class="number">1.</span>..列名n)</span><br></pre></td></tr></table></figure><h5 id="删除候选键"><a href="#删除候选键" class="headerlink" title="删除候选键"></a>删除候选键</h5><p><code>alter table 表名 drop index 约束名\候选键字段名;</code></p><h4 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h4><h5 id="列级"><a href="#列级" class="headerlink" title="列级"></a>列级</h5><p><code>字段名 数据类型 not null,</code></p><h5 id="在已存在的字段上修改字段为非空约束"><a href="#在已存在的字段上修改字段为非空约束" class="headerlink" title="在已存在的字段上修改字段为非空约束"></a>在已存在的字段上修改字段为非空约束</h5><p><code>alter table 表名 modify 字段名 数据类型 not null;</code></p><h5 id="添加新字段并且创建非空约束"><a href="#添加新字段并且创建非空约束" class="headerlink" title="添加新字段并且创建非空约束"></a>添加新字段并且创建非空约束</h5><p><code>alter table 表名 add 字段名 数据类型 not null;</code></p><h5 id="删除非空约束"><a href="#删除非空约束" class="headerlink" title="删除非空约束"></a>删除非空约束</h5><p><code>alter table 表名 modify 字段名 数据类型 NULL;</code></p><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><h5 id="列级-1"><a href="#列级-1" class="headerlink" title="列级"></a>列级</h5><p><code>字段名 数据类型 default 数值\字符串</code></p><h5 id="在已存在的字段上修改字段默认值"><a href="#在已存在的字段上修改字段默认值" class="headerlink" title="在已存在的字段上修改字段默认值"></a>在已存在的字段上修改字段默认值</h5><p><code>alter table 表名 alter 字段名 set drfault 数值\字符串;</code></p><h5 id="在表中添加字段并且设置初始值"><a href="#在表中添加字段并且设置初始值" class="headerlink" title="在表中添加字段并且设置初始值"></a>在表中添加字段并且设置初始值</h5><p><code>alter table 表名 add 新字段名 数据类型 default 数值\字符串;</code></p><h5 id="删除字符串默认值"><a href="#删除字符串默认值" class="headerlink" title="删除字符串默认值"></a>删除字符串默认值</h5><p><code>alter table 表名 alter 字段名 drop defaule;</code></p><h4 id="自增约束"><a href="#自增约束" class="headerlink" title="自增约束"></a>自增约束</h4><p>(必须为主键或者候选键且数据类型必须为int)</p><h5 id="列级-2"><a href="#列级-2" class="headerlink" title="列级"></a>列级</h5><p><code>字段名 数据类型 primary key \unique auto_increment</code></p><h5 id="在表中已存在的字段添加自增约束"><a href="#在表中已存在的字段添加自增约束" class="headerlink" title="在表中已存在的字段添加自增约束"></a>在表中已存在的字段添加自增约束</h5><p><code>alter table 表名 modify 字段名 数据类型 auto_increment primary primary key \unique ;</code></p><h5 id="在表中添加新字段并且设置自增约束"><a href="#在表中添加新字段并且设置自增约束" class="headerlink" title="在表中添加新字段并且设置自增约束"></a>在表中添加新字段并且设置自增约束</h5><p><code>alter table 表名 add 字段名 数据类型 primary key/unique auto_increment;</code></p><h5 id="删除自增约束"><a href="#删除自增约束" class="headerlink" title="删除自增约束"></a>删除自增约束</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t9 <span class="keyword">modify</span> <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line"><span class="comment">#这里用的modify，只改变数据类型，也可以用change，改变列名的同时输入新的数据类型。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> primary <span class="keyword">key</span> /<span class="keyword">unique</span>;</span><br></pre></td></tr></table></figure><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><p>(表储存引擎必须为innodb)</p><h5 id="列级-3"><a href="#列级-3" class="headerlink" title="列级"></a>列级</h5><p><code>[constraint 外键约束名] foreign key(字段名) reference 被参照表(字段名)</code></p><h5 id="在表中为已存在的字段添加外键约束"><a href="#在表中为已存在的字段添加外键约束" class="headerlink" title="在表中为已存在的字段添加外键约束"></a>在表中为已存在的字段添加外键约束</h5><p><code>alter table 参照表名 add [constraint 外键约束名] foreign key(参照表字段) references 被参照表(被参照字段);</code></p><h5 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h5><p><code>alter table 表名 drop foreign key 约束名;</code></p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h4 id="主键索引-添加主键"><a href="#主键索引-添加主键" class="headerlink" title="主键索引 (添加主键)"></a>主键索引 (添加主键)</h4><h5 id="添加主键索引"><a href="#添加主键索引" class="headerlink" title="添加主键索引"></a>添加主键索引</h5><p><code>alter table 表名 add primary key(字段名);</code></p><h5 id="删除主键索引"><a href="#删除主键索引" class="headerlink" title="删除主键索引"></a>删除主键索引</h5><p><code>alter table 表名 drop primary key;</code></p><h4 id="唯一索引-添加候选键"><a href="#唯一索引-添加候选键" class="headerlink" title="唯一索引(添加候选键)"></a>唯一索引(添加候选键)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">unique</span>(字段名);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> 索引名 <span class="keyword">on</span> 表名(字段名);</span><br></pre></td></tr></table></figure><h5 id="删除唯一索引"><a href="#删除唯一索引" class="headerlink" title="删除唯一索引"></a>删除唯一索引</h5><p><code>alter table 表名 drop index 约束名\字段名</code></p><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><h5 id="表级-2"><a href="#表级-2" class="headerlink" title="表级"></a>表级</h5><p><code>index||key 索引名(字段名)</code></p><h4 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h4><h5 id="表级-3"><a href="#表级-3" class="headerlink" title="表级"></a>表级</h5><p><code>index||key 索引名 (字段名1,字段名2)</code></p><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><p><code>show index from 表名\G</code></p><h4 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> 索引名 <span class="keyword">on</span> 表名(字段名);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">index</span> 索引名(字段名);</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p><code>drop index 约束名||首个字段名;</code></p><p>全#### 文索引<br>(字段必须是字符型,引擎必须为MYISAM</p><h5 id="表级-4"><a href="#表级-4" class="headerlink" title="表级"></a>表级</h5><p><code>fulltext index [索引名](字段名1,字段名2))engine=MYISAM;</code></p><h5 id="删除全文索引"><a href="#删除全文索引" class="headerlink" title="删除全文索引"></a>删除全文索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> 索引名 <span class="keyword">on</span> 表名;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">index</span> 索引名||首个字段名</span><br></pre></td></tr></table></figure><h5 id="添加全文索引-引擎必须为MYISAM"><a href="#添加全文索引-引擎必须为MYISAM" class="headerlink" title="添加全文索引(引擎必须为MYISAM)"></a>添加全文索引(引擎必须为MYISAM)</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> fulltext <span class="keyword">index</span> 索引名 <span class="keyword">on</span> 表名(字段名);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> fulltext <span class="keyword">index</span> 索引名(字段名)</span><br></pre></td></tr></table></figure><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">insert  into 表名 (字段名<span class="number">1</span>,字段名<span class="number">2</span>,...字段名n)</span><br><span class="line">values(数值<span class="number">1</span>,数值<span class="number">2</span>,...数值n);</span><br></pre></td></tr></table></figure><h4 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h4><p><code>select * from 表名;</code></p><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><h5 id="根据条件更新某一条数据"><a href="#根据条件更新某一条数据" class="headerlink" title="根据条件更新某一条数据"></a>根据条件更新某一条数据</h5><p><code>update 表名 set 字段名 = 数值 where 要修改的字段名=数值;</code></p><h5 id="更新所有的数据记录"><a href="#更新所有的数据记录" class="headerlink" title="更新所有的数据记录"></a>更新所有的数据记录</h5><p><code>update 表名 set 字段名=数值;</code></p><h5 id="根据条件删除"><a href="#根据条件删除" class="headerlink" title="根据条件删除"></a>根据条件删除</h5><p><code>delete from 表名 where 字段名=数值;</code></p><h5 id="删除表中所有数据"><a href="#删除表中所有数据" class="headerlink" title="删除表中所有数据"></a>删除表中所有数据</h5><p><code>delete from 表名;</code></p><h1 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h1><h4 id="简单数据查询"><a href="#简单数据查询" class="headerlink" title="简单数据查询"></a>简单数据查询</h4><h5 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h5><p><code>select*form 表名</code></p><h5 id="查询指定字段的数据记录"><a href="#查询指定字段的数据记录" class="headerlink" title="查询指定字段的数据记录"></a>查询指定字段的数据记录</h5><p><code>select  字段名1, 字段名2 ,.......字段名n  from 表名;</code></p><h5 id="避免重复数据查询-distinct"><a href="#避免重复数据查询-distinct" class="headerlink" title="避免重复数据查询(distinct)"></a>避免重复数据查询(distinct)</h5><p><code>select distinct 字段名 from 表名;</code></p><h5 id="多列记录显示在一列-concat"><a href="#多列记录显示在一列-concat" class="headerlink" title="多列记录显示在一列(concat)"></a>多列记录显示在一列(concat)</h5><p><code>select concat(字段名1,’描述信息’,....字段名n) as 别名 from 表名;</code></p><h5 id="四则运算查询"><a href="#四则运算查询" class="headerlink" title="四则运算查询"></a>四则运算查询</h5><h5 id="时间查询"><a href="#时间查询" class="headerlink" title="时间查询:"></a>时间查询:</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span> <span class="keyword">now</span>();(查询现在的年份)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="keyword">now</span>())-<span class="keyword">year</span>(字段名) <span class="keyword">as</span> 年龄 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="条件数据查询"><a href="#条件数据查询" class="headerlink" title="条件数据查询"></a>条件数据查询</h4><pre><code>where 条件关系运算符逻辑运算符</code></pre><p><code>select 字段名1,字段名2,.... from 表名 where 条件;</code></p><h5 id="包含两个数据之间的查询"><a href="#包含两个数据之间的查询" class="headerlink" title="包含两个数据之间的查询"></a>包含两个数据之间的查询</h5><p>(between)(在between前加not 表示排除这之间的条件)<br><code>select 字段名1,字段名2.....from 表名 where 字段名 between 数值1 and 80;</code></p><h5 id="带空字段的查询"><a href="#带空字段的查询" class="headerlink" title="带空字段的查询"></a>带空字段的查询</h5><p><code>select 字段名1,字段名,字段名n  form 表名 where 字段名 is NULL;</code></p><h5 id="带in的集合查询"><a href="#带in的集合查询" class="headerlink" title="带in的集合查询"></a>带in的集合查询</h5><p>(若为not in则则排除这些条件)<br><code>select 字段1,字段2,.,..  from 表名 where 字段名 in(‘条件1’,’条件2’);</code></p><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,.,..  <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名  <span class="keyword">like</span> ‘数值’;</span><br><span class="line">数值:由通配符和字符或数字组成</span><br><span class="line">通配符:_ 代表单个字符或数字</span><br><span class="line">通配符:% 代表任意单个或多个字符或数字</span><br><span class="line">like ‘%字符或数字%’;  模糊查询</span><br></pre></td></tr></table></figure><h5 id="排序数据记录查询"><a href="#排序数据记录查询" class="headerlink" title="排序数据记录查询"></a>排序数据记录查询</h5><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段名 <span class="keyword">asc</span>|<span class="keyword">desc</span> (升,降序)</span><br><span class="line">若没有升降序则默认升序</span><br><span class="line">多个字段排序规则:按照字段先来先排的规则</span><br><span class="line">当首个排序字段遇上相同数据时,后来的字段根据实际排序规则进行排序</span><br></pre></td></tr></table></figure><h5 id="限制记录查询"><a href="#限制记录查询" class="headerlink" title="限制记录查询"></a>限制记录查询</h5><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">limit</span> 起始位置,显示行数;</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">limit</span>显示行数 <span class="keyword">offset</span> 起始位置;</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">limit</span> 显示行数;</span><br><span class="line">起始位置从0开始</span><br></pre></td></tr></table></figure><h4 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h4><h5 id="count-计数函数"><a href="#count-计数函数" class="headerlink" title="count() 计数函数"></a>count() 计数函数</h5><p><code>select count(*)from 表名;</code><br>*–代表表中任意一列字段</p><h5 id="avg-平均值函数"><a href="#avg-平均值函数" class="headerlink" title="avg()平均值函数"></a>avg()平均值函数</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">avg</span><span class="params">(字段名)</span></span></span><br><span class="line"><span class="function"><span class="title">avg</span><span class="params">(表达式)</span></span></span><br></pre></td></tr></table></figure><h5 id="sum-求和函数"><a href="#sum-求和函数" class="headerlink" title="sum()求和函数"></a>sum()求和函数</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">sum</span><span class="params">(字段名)</span></span></span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(表达式)</span></span></span><br></pre></td></tr></table></figure><h5 id="min-最小值函数"><a href="#min-最小值函数" class="headerlink" title="min()最小值函数"></a>min()最小值函数</h5><p><code>min(字段名)</code></p><h5 id="max-最大值函数"><a href="#max-最大值函数" class="headerlink" title="max()最大值函数"></a>max()最大值函数</h5><p><code>max(字段名)</code></p><h5 id="format-函数支持四舍五入"><a href="#format-函数支持四舍五入" class="headerlink" title="format()函数支持四舍五入"></a>format()函数支持四舍五入</h5><h5 id="turncate-函数不支持四舍五入-直接截断"><a href="#turncate-函数不支持四舍五入-直接截断" class="headerlink" title="turncate()函数不支持四舍五入,直接截断"></a>turncate()函数不支持四舍五入,直接截断</h5><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p><code>group by 字段名1,字段名2 having 条件;</code></p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><h5 id="获取当前日期"><a href="#获取当前日期" class="headerlink" title="获取当前日期"></a>获取当前日期</h5><p><code>curdate或current_date 2019-04-19</code></p><h5 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h5><p><code>curtime或current_time 12:00:50</code></p><h5 id="获取当前日期和时间"><a href="#获取当前日期和时间" class="headerlink" title="获取当前日期和时间"></a>获取当前日期和时间</h5><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">now()<span class="comment">;</span></span><br><span class="line">year(<span class="name">now</span>())<span class="comment">;</span></span><br><span class="line">time(<span class="name">now</span>())<span class="comment">;</span></span><br><span class="line">month(<span class="name">now</span>())<span class="comment">;</span></span><br><span class="line">day(<span class="name">now</span>())<span class="comment">;</span></span><br><span class="line">week(<span class="name">now</span>())<span class="comment">;</span></span><br></pre></td></tr></table></figure><h5 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h5><h6 id="取绝对值函数"><a href="#取绝对值函数" class="headerlink" title="取绝对值函数"></a>取绝对值函数</h6><p><code>abs()</code></p><h6 id="随机函数-0和1之间"><a href="#随机函数-0和1之间" class="headerlink" title="随机函数,0和1之间"></a>随机函数,0和1之间</h6><p><code>rand()</code></p><h6 id="向下取整函数"><a href="#向下取整函数" class="headerlink" title="向下取整函数"></a>向下取整函数</h6><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">fool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">fool</span><span class="params">(-<span class="number">9.87</span>)</span></span> -<span class="number">10</span></span><br><span class="line"><span class="function"><span class="title">fool</span><span class="params">(<span class="number">4.3</span>)</span></span>   <span class="number">5</span></span><br></pre></td></tr></table></figure><h6 id="开平方根函数"><a href="#开平方根函数" class="headerlink" title="开平方根函数"></a>开平方根函数</h6><p><code>sqrt()</code></p><h5 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h5><h6 id="小写转大写函数"><a href="#小写转大写函数" class="headerlink" title="小写转大写函数"></a>小写转大写函数</h6><p><code>upper()和ucase()</code></p><h6 id="从左开始取字符n个"><a href="#从左开始取字符n个" class="headerlink" title="从左开始取字符n个"></a>从左开始取字符n个</h6><p><code>left(&#39;字符串&#39;,n);</code></p><h6 id="指定从第n个字符取m个字符串"><a href="#指定从第n个字符取m个字符串" class="headerlink" title="指定从第n个字符取m个字符串"></a>指定从第n个字符取m个字符串</h6><p><code>substring(&#39;字符串&#39;,n,m);</code></p><h5 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h5><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">if(表达式,v1,v2);若表达式成立则执行v1,若不成立执行v2</span><br><span class="line">ifnull(v1,v2)若字段v1有空则输出v2</span><br></pre></td></tr></table></figure><h4 id="链接查询"><a href="#链接查询" class="headerlink" title="链接查询"></a>链接查询</h4><h5 id="交叉链接查询-笛卡尔积"><a href="#交叉链接查询-笛卡尔积" class="headerlink" title="交叉链接查询(笛卡尔积)"></a>交叉链接查询(笛卡尔积)</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">cross</span> <span class="keyword">join</span> 表<span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h5 id="内链接"><a href="#内链接" class="headerlink" title="内链接"></a>内链接</h5><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span> <span class="keyword">where</span> 过滤条件</span><br><span class="line"><span class="keyword">select</span>*<span class="keyword">from</span> 表<span class="number">1</span> lnner <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 过滤条件;</span><br></pre></td></tr></table></figure><h5 id="自然链接"><a href="#自然链接" class="headerlink" title="自然链接"></a>自然链接</h5><p>(自然链接的两个表中的两个字段名必须相同,并且字段的内容必须相同或者相似)<br><code>select * from 表1 natural join 表2;</code></p><h5 id="自链接-表的自身链接"><a href="#自链接-表的自身链接" class="headerlink" title="自链接:表的自身链接"></a>自链接:表的自身链接</h5><p>(查询的表与做条件的表不能是一个表)</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*<span class="keyword">from</span> 表<span class="number">1</span> a <span class="keyword">join</span> 表<span class="number">1</span> b <span class="keyword">on</span> a.字段名<span class="number">1</span>=b.字段名<span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> b.*<span class="keyword">from</span> 表<span class="number">1</span> a <span class="keyword">join</span> 表<span class="number">1</span> b <span class="keyword">on</span> a.字段名<span class="number">1</span>=a.字段名<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h5 id="外链接"><a href="#外链接" class="headerlink" title="外链接"></a>外链接</h5><p>左外链接:left[outer]join(以左表为基准表,显示左表中的全部内容,右边只显示与左表条件相同的部分,不同的以NULL代替)<br><code>select*from 表1 left join 表2 on|where 链接条件;</code><br>右外链接<code>:right[outer]join</code></p><h5 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h5><p>union(显示合并之后的所有记录,去除重复项)<br>union all(显示所有的链接记录)<br>*联合查询只显示union之间表的字段名称<br>联合查询的两个表的链接的字段数据类型必须是兼容的</p><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><h6 id="带in的子查询"><a href="#带in的子查询" class="headerlink" title="带in的子查询"></a>带in的子查询</h6><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名<span class="number">1</span> <span class="keyword">where</span> 字段名 <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名<span class="number">2</span> );</span><br></pre></td></tr></table></figure><h6 id="条件子查询"><a href="#条件子查询" class="headerlink" title="条件子查询"></a>条件子查询</h6><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名<span class="number">1</span> <span class="keyword">where</span> 字段名 <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名<span class="number">2</span> );</span><br></pre></td></tr></table></figure><h6 id="带关键字any-some-all的比较运算符的子查询"><a href="#带关键字any-some-all的比较运算符的子查询" class="headerlink" title="带关键字any,some,all的比较运算符的子查询"></a>带关键字any,some,all的比较运算符的子查询</h6><p>关键字any,some代表某一个,all代表所有</p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><p><code>Create view 视图名 as  查询语句;</code></p><h4 id="创建视图或修改视图"><a href="#创建视图或修改视图" class="headerlink" title="创建视图或修改视图"></a>创建视图或修改视图</h4><p><code>create or replace 视图名 as 查询语句</code></p><h4 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h4><p><code>Select * from 视图名;</code></p><h4 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h4><p><code>Alter view 视图名 as 查询语句;</code></p><h4 id="查看视图名称"><a href="#查看视图名称" class="headerlink" title="查看视图名称"></a>查看视图名称</h4><p><code>Show tables;</code></p><h4 id="查看视图结构和详细信息"><a href="#查看视图结构和详细信息" class="headerlink" title="查看视图结构和详细信息"></a>查看视图结构和详细信息</h4><p><code>Desc 视图名;</code><br><code>Show create view|table 视图名 \G</code></p><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><p><code>Drop view 视图名;</code></p><h4 id="对视图进行数据插入"><a href="#对视图进行数据插入" class="headerlink" title="对视图进行数据插入"></a>对视图进行数据插入</h4><p><code>insert into 视图名(字段名1,字段名2)values(数值1,数值2);</code></p><h4 id="对视图更新数据"><a href="#对视图更新数据" class="headerlink" title="对视图更新数据"></a>对视图更新数据</h4><p><code>update 视图名 set 字段名=数值 where 条件;</code></p><h4 id="删除视图中的数据"><a href="#删除视图中的数据" class="headerlink" title="删除视图中的数据"></a>删除视图中的数据</h4><p><code>delete from 视图名 where 条件;</code></p><h4 id="删除视图中的数据-1"><a href="#删除视图中的数据-1" class="headerlink" title="删除视图中的数据"></a>删除视图中的数据</h4><p><code>delete from 视图名 where 条件;</code></p><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h4 id="触发器的创建"><a href="#触发器的创建" class="headerlink" title="触发器的创建"></a>触发器的创建</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> 触发器名称  <span class="comment">--定义触发器名称</span></span><br><span class="line"><span class="keyword">before</span>|<span class="keyword">after</span>                                <span class="comment">--触发时刻</span></span><br><span class="line"><span class="keyword">insert</span>|<span class="keyword">update</span>|<span class="keyword">delete</span> <span class="keyword">on</span> 表名 <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span>              <span class="comment">--触发事件</span></span><br><span class="line">执行事件</span><br></pre></td></tr></table></figure><h4 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h4><p><code>Set @变量名=值;</code></p><h4 id="查询变量"><a href="#查询变量" class="headerlink" title="查询变量"></a>查询变量</h4><p><code>Select @变量名;</code></p><h4 id="命名结束符"><a href="#命名结束符" class="headerlink" title="命名结束符"></a>命名结束符</h4><p><code>Delimiter 结束符</code></p><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><p><code>Create procedure 存储过程名（参数)</code><br>存储过程体；</p><h4 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h4><p><code>call 存储过程名（@参数）;</code></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>IN|OUT|INOUT  参数名称 数据类型</p><h5 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h5><p>IN 参数名称 数据类型</p><h5 id="输入参数-1"><a href="#输入参数-1" class="headerlink" title="输入参数"></a>输入参数</h5><p>只受外部输入值的影响，不会受存储过程中程序影响</p><h5 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h5><p>OUT 参数名称 数据类型<br>输出参数：不受外部输入值的影响，只会受存储过程中程序影响，<br>返回存储过程中的值给输出参数</p><h5 id="输入输出参数"><a href="#输入输出参数" class="headerlink" title="输入输出参数"></a>输入输出参数</h5><p>INOUT 参数名称 数据类型<br>输入输出参数：受外部输入值的影响，又会受存储过程中程序影响，<br>返回存储过程中的值给输入输出参数</p><h4 id="查询结果输出至变量"><a href="#查询结果输出至变量" class="headerlink" title="查询结果输出至变量"></a>查询结果输出至变量</h4><p><code>Select  查询值 into 变量 from 表名 where 条件;</code></p><h4 id="声明局部变量，并同时赋默认值"><a href="#声明局部变量，并同时赋默认值" class="headerlink" title="声明局部变量，并同时赋默认值"></a>声明局部变量，并同时赋默认值</h4><p><code>Declare  变量名称 数据类型 default 默认值;</code><br>注意：<br>（1）局部变量只能在存储过程体的BEGIN…END语句块中声明。<br>（2）局部变量必须在存储过程体的开头处声明。<br>（3）局部变量的作用范围仅限于声明它的BEGIN…END语句块，其它语句块中的语句不可以使用它。<br>（4）局部变量不同于用户变量，两者的区别是：局部变量声明时，在其前面没有使用“@”符号，并且它只能声明它的BEGIN…END语句块中的语句所使用；用户变量在声明时，会在前面使用“@”符号，同时声明的用户变量存在于整个会话之中。</p><h4 id="存储过程语句块范围"><a href="#存储过程语句块范围" class="headerlink" title="存储过程语句块范围"></a>存储过程语句块范围</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Begin</span></span><br><span class="line">语句</span><br><span class="line"><span class="keyword">End</span>;</span><br></pre></td></tr></table></figure><h4 id="查看存储过程"><a href="#查看存储过程" class="headerlink" title="查看存储过程"></a>查看存储过程</h4><p><code>Show procedure 存储过程名 \G</code></p><h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><p><code>Drop procedure 存储过程名;</code></p><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h4 id="创建事件"><a href="#创建事件" class="headerlink" title="创建事件"></a>创建事件</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Delimiter $$</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">event</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> 事件名称</span><br><span class="line"><span class="keyword">On</span> Schedule 时间调度</span><br><span class="line"><span class="keyword">Do</span></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">事件语句<span class="number">1</span>;</span><br><span class="line">事件语句2;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h4 id="时间调度（Schedule）"><a href="#时间调度（Schedule）" class="headerlink" title="时间调度（Schedule）"></a>时间调度（Schedule）</h4><p>用于指定事件何时发生或者每隔多久发生一次；<br>Interval</p><h5 id="立即执行"><a href="#立即执行" class="headerlink" title="立即执行"></a>立即执行</h5><p><code>On schedule at now()</code></p><h5 id="隔多长时间后执行"><a href="#隔多长时间后执行" class="headerlink" title="隔多长时间后执行"></a>隔多长时间后执行</h5><p><code>On schedule at now()+interval 时间 时间单位</code><br>    时间单位:年year,月month,周week,日day,小时hour,分钟minute,秒second</p><h5 id="每多长时间执行一次"><a href="#每多长时间执行一次" class="headerlink" title="每多长时间执行一次"></a>每多长时间执行一次</h5><p><code>On scheduler every 时间 时间单位</code></p><h4 id="Timestamp"><a href="#Timestamp" class="headerlink" title="Timestamp"></a>Timestamp</h4><p>表示具体的时间点<br>后可跟一个具体的时间点</p><h4 id="查看事件调度器是否开启"><a href="#查看事件调度器是否开启" class="headerlink" title="查看事件调度器是否开启"></a>查看事件调度器是否开启</h4><p><code>Show variables like ‘event_scheduler’;</code></p><h4 id="查看系统变量"><a href="#查看系统变量" class="headerlink" title="查看系统变量"></a>查看系统变量</h4><p><code>Select @@event_scheduler;</code></p><h4 id="开启事件调度器"><a href="#开启事件调度器" class="headerlink" title="开启事件调度器"></a>开启事件调度器</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">Set</span> global <span class="attribute">event_scheduler</span>=1;</span><br><span class="line">或</span><br><span class="line"><span class="builtin-name">Set</span> global <span class="attribute">event_scheduler</span>=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h4 id="修改事件"><a href="#修改事件" class="headerlink" title="修改事件"></a>修改事件</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">EVENT</span> 事件名称</span><br><span class="line"><span class="keyword">ON</span> SCHEDULE 时间调度</span><br><span class="line">[<span class="keyword">RENAME</span> <span class="keyword">TO</span> 新的事件名称]</span><br><span class="line"><span class="keyword">Do</span> event_body;</span><br><span class="line"><span class="keyword">Do</span></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">事件语句<span class="number">1</span>;</span><br><span class="line">事件语句2;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h4 id="临时关闭已创建的事件"><a href="#临时关闭已创建的事件" class="headerlink" title="临时关闭已创建的事件"></a>临时关闭已创建的事件</h4><p><code>Alter event 事件名 disable;</code></p><h4 id="再次开启已创建的事件"><a href="#再次开启已创建的事件" class="headerlink" title="再次开启已创建的事件"></a>再次开启已创建的事件</h4><p><code>Alter event 事件名 enable;</code></p><h4 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h4><p><code>Drop event [if exists] 事件名;</code></p><h4 id="条件选择循环以及游标"><a href="#条件选择循环以及游标" class="headerlink" title="条件选择循环以及游标"></a>条件选择循环以及游标</h4><h5 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h5><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">IF</span>  条件 <span class="keyword">then</span></span><br><span class="line">语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">Else</span> <span class="keyword">if</span> 条件 <span class="keyword">then</span> </span><br><span class="line">语句<span class="number">2</span>；</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">语句<span class="number">3</span>；</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">if</span>;</span><br></pre></td></tr></table></figure><h5 id="分支选择语句"><a href="#分支选择语句" class="headerlink" title="分支选择语句"></a>分支选择语句</h5><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Case</span> 变量名</span><br><span class="line"><span class="keyword">when</span> 数值<span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">语句<span class="number">1</span>；</span><br><span class="line"><span class="keyword">when</span> 数值<span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">语句<span class="number">2</span>；</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">语句<span class="number">3</span>；</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">循环控制语句</span><br><span class="line"><span class="keyword">While</span>循环</span><br><span class="line"><span class="keyword">while</span> 条件 <span class="keyword">Do</span></span><br><span class="line">循环语句；</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span>;</span><br></pre></td></tr></table></figure><h5 id="repeat循环"><a href="#repeat循环" class="headerlink" title="repeat循环"></a>repeat循环</h5><figure class="highlight cal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Repeat</span> </span><br><span class="line">循环语句；</span><br><span class="line"><span class="keyword">Until</span> 条件</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br></pre></td></tr></table></figure><h4 id="游标-CURSOR"><a href="#游标-CURSOR" class="headerlink" title="游标(CURSOR)"></a>游标(CURSOR)</h4><p>1.只能用于存储过程或存储函数中，不能单独在查询操作中使用；<br>2.在存储过程或存储函数中可以定义多个游标，但是一个BEGIN…END<br>语句块中每一个游标的名字必须是唯一的；<br>3.游标不是一条SELECT语句，是被SELECT语句检索出来的结果集；</p><h5 id="1-申明游标"><a href="#1-申明游标" class="headerlink" title="1.申明游标"></a>1.申明游标</h5><p><code>Declare 游标名称 CURSOR for Select 语句;</code></p><h5 id="2-开游标："><a href="#2-开游标：" class="headerlink" title="2.开游标："></a>2.开游标：</h5><p><code>OPEN 游标名称;</code></p><h5 id="3-游标取值："><a href="#3-游标取值：" class="headerlink" title="3.游标取值："></a>3.游标取值：</h5><p><code>FETCH 游标名 INTO 变量名;</code></p><h5 id="4-关闭游标："><a href="#4-关闭游标：" class="headerlink" title="4.关闭游标："></a>4.关闭游标：</h5><p><code>CLOSE 游标名称;</code></p><h4 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h4><h5 id="定义句柄"><a href="#定义句柄" class="headerlink" title="定义句柄"></a>定义句柄</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Declare</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">NOT</span> <span class="keyword">FOUND</span></span><br><span class="line"><span class="keyword">set</span> 变量名=<span class="number">0</span>|<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>未完待续~</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EXCEL常用函数总结</title>
      <link href="/2019/07/26/EXCEL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
      <url>/2019/07/26/EXCEL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="1-单条件求和——SUMIF-函数"><a href="#1-单条件求和——SUMIF-函数" class="headerlink" title="1.单条件求和——SUMIF 函数"></a>1.单条件求和——SUMIF 函数</h1><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式:"></a>语法格式:</h3><p><code>=sumif(range，criteria，sum_range)</code><br>Sumif（条件区域，求和条件，实际求和区域）<br>注:第二个求和条件参数在第一个条件区域里。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h3><p>统计书店的销售量<br><img src="/img/EXCEL常用函数总结/SUMIF.png"></p><p>要求是统计鼎盛书店的销量,公式:<br><code>=SUMIF(C3:C636,G4,E3:E636)</code><br>1.条件区域:第一个参数条件区域是c列c3至c636,这里是书店名称</p><p>2.求和条件:第二个参数求和条件是G4,只有在条件区域里满足G4的条件才可以进行求和,而这里的就是只有书店名称是鼎盛书店的才能被求和,其他的则自动忽略</p><p>3.实际求和区域:要在此区域选择满足书店名称等于鼎盛书店的的销量,然后求和</p><h1 id="2-多条件求和—SUMIFS函数"><a href="#2-多条件求和—SUMIFS函数" class="headerlink" title="2.多条件求和—SUMIFS函数"></a>2.多条件求和—SUMIFS函数</h1><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><p><code>=sumifs(sum_range, criteria_range1, criteria1, [criteria_range2, criteria2], ...)</code><br>SUMIFS(实际求和区域，第一个条件区域，第一个对应的求和条件，第二个条件区域，第二个对应的求和条件，第N个条件区域，第N个对应的求和条件）</p><p>主要功能：对指定单元格区域中符合多组条件的单元格求和。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>统计《MSOffice高级应用》图书在2012年的总销售额<br><img src="/img/EXCEL常用函数总结/SUMIFS.png"></p><p>公式:<br><code>=SUMIFS(订单明细表!,表3[图书名称]，&quot;《MS Ofice高级应用》&quot;，表3[日期]，&quot;&gt;=2012-1-1&quot;,表3[日期],&quot;&lt;=2012-12-31&quot;)</code></p><p>本题中参数含义如下：<br>参数1-求和区域：参加求和的实际单元格区域，即销售额（小计）列；<br>参数2-条件区域1：第1组条件中指定的区域，即图书名称列；<br>参数3-条件1：第1组条件中指定的条件，即要查找的图书，为《MS Office高级应用》；<br>参数4-条件区域2：第2组条件中指定的区域，即日期列；<br>参数5-条件2：第2组条件中指定的条件，先设条件为大于等于2012-01-01；<br>参数6-条件区域3：第3组条件中指定的区域，即日期列；<br>参数7-条件3：第3组条件中指定的条件，再设条件为小于等于2012-12-31；<br>还可以有其他多组条件<br>注:直接输入公式的话条件需要打双引号””括起来</p><h1 id="3-查找函数—VLOOKUP"><a href="#3-查找函数—VLOOKUP" class="headerlink" title="3.查找函数—VLOOKUP"></a>3.查找函数—VLOOKUP</h1><h3 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h3><p><code>VLOOKUP(lookup_value,table_array, col_index_num, [range_lookup])</code><br>VLOOKUP(查找目标,查找的范围,返回值的列数,精确或模糊查找)</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>使用VLOOKUP函数完成图书名称的自动填充。图书名称“和”图书编号”的对应关系在”编号对照”工作表中。<br><img src="/img/EXCEL常用函数总结/VLOOKUP1.png"><br><img src="/img/EXCEL常用函数总结/VLOOKUP2.png"></p><p>公式<br>=VLOOKUP([@图书编号],表2,2,0)<br>参数1-查找目标：“D3”。将在参数2指定区域的第1列中查找与D3相同的单元格。<br>参数2-查找范围：“编号对照！SAS2.SCS19°表示“编号对照”工作表中的A2：C19数据区域。注意：查找目标一定要在该区域的第一列。<br>参数3-返回值的列数：“2表示参数2中工作表的第2列。如果在参数2中找到与参数1相同的单元格，则返回第2列的内容。<br>参数4-精确或模糊查找：决定查找精确匹配值还是近似匹配值。第4个参数如果值为0或FALSE则表示精确查找，如果找不到精确匹配值，则返回错误值#/A。如果值为1或TRUE，或者省略时，则表示模糊查找。</p><h1 id="4-RANK排名函数-绝对引用"><a href="#4-RANK排名函数-绝对引用" class="headerlink" title="4.RANK排名函数(绝对引用)"></a>4.RANK排名函数(绝对引用)</h1><h3 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h3><p><code>=rank(number,ref,[order])</code><br>number ——参与排名的数值<br>ref ——排名的数值区域<br>order——有1和0两种。0——从大到小排名（降序），1——从小到大排名（升序）<br>0默认不用输入，得到的就是从大到小的排名</p><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>按成绩由高到底的顺序统计每个学生的总分排名<br><img src="/img/EXCEL常用函数总结/RANK.png"></p><p>公式<br><code>=RANK(J3,$J$3:$J$46,0)</code><br>参数1:参与排名的数 题目中是J3,也就是608分<br>参数2:参与排名的区域,题中是整个总分列<br>注意: 此处要用绝对引用,若不用绝对引用,则填充时此区域会随着行的改变而改变<br>参数3:0,也就是从大到小排名</p><h1 id="5-字符串截取函数—MID"><a href="#5-字符串截取函数—MID" class="headerlink" title="5.字符串截取函数—MID"></a>5.字符串截取函数—MID</h1><h3 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h3><p><code>=MID(text,start_num,num_chars)</code><br>=MID(字符串,第几位开始,截取几位)<br>注意:截取的那部分单元格必须是文本格式</p><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>截取身份证号码的出生日期<br><img src="/img/EXCEL常用函数总结/MID.png"></p><p>公式<br><code>=MID(C2,7,4)&amp;&quot;年&quot;&amp;MID(C2,11,2)&amp;&quot;月&quot;&amp;MID(C2,13,2)&amp;&quot;日&quot;</code><br>MID(C2,7,4)表示从C2单元格的第七位开始截取4位,<br>其后以此类推<br>若须加字符得用&amp;号连接并打双引号</p><h1 id="选择函数—IF"><a href="#选择函数—IF" class="headerlink" title="选择函数—IF"></a>选择函数—IF</h1><h3 id="语法格式-4"><a href="#语法格式-4" class="headerlink" title="语法格式"></a>语法格式</h3><p><code>=IF(logical_test,[Value_if_true],[value_if_false])</code><br>=IF(条件,条件成立时执行,条件不成立时执行)</p><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>判断成绩是否属于优秀<br><img src="/img/EXCEL常用函数总结/IF.png"></p><p>公式:<br><code>=IF(A2&gt;=90,&quot;优秀&quot;,&quot;不优秀&quot;)</code><br>如果A2大于或等于90分,就在单元格中填入优秀,若不成立的话,就填入不优秀<br>注:若是要填入字符串的话要打双引号哦</p><h1 id="除余函数—MOD以及公式的嵌套使用"><a href="#除余函数—MOD以及公式的嵌套使用" class="headerlink" title="除余函数—MOD以及公式的嵌套使用"></a>除余函数—MOD以及公式的嵌套使用</h1><h3 id="语法格式-5"><a href="#语法格式-5" class="headerlink" title="语法格式"></a>语法格式</h3><p><code>=MOD(number,divisor)</code><br>=MOD(被除数,除数)<br>注:此函数一般不单独使用,常和其他函数组合起来使用<br>如果 divisor 为零，函数 MOD 返回错误值 #DIV/0!<br>若有符数,则结果与除数符号相同<br>例:10与3的余数为1<br><img src="/img/EXCEL常用函数总结/MOD1.png"></p><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>由身份证号码判断性别<br><img src="/img/EXCEL常用函数总结/MOD2.png"></p><p>公式:<br><code>=IF(MOD(MID(C2,17,1),2)=1,&quot;男&quot;,&quot;女&quot;)</code><br>1.用MID函数截取身份证号码第十七位开始截取一位<br>‘MID(身份证号码,第十七位开始,截取1位)<br>2.用MOD函数判断那第十七位除以2<br>MOD(截取后的第十七位,被除数)’ 3.用IF函数判断余数是否为1,若为1则为奇数,是男生,若不为1,则为偶数,是女生 ‘ IF(余数是否等于1,是的话为男,不是的话为女)</p><h1 id="取整函数–INT"><a href="#取整函数–INT" class="headerlink" title="取整函数–INT"></a>取整函数–INT</h1><h3 id="语法格式-6"><a href="#语法格式-6" class="headerlink" title="语法格式"></a>语法格式</h3><p><code>=INT(number)</code><br>注:此函数不进行四舍五入,直接截取</p><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>对A1单元格进行取整<br><img src="/img/EXCEL常用函数总结/INT.png"></p><h1 id="日期函数–TODAY"><a href="#日期函数–TODAY" class="headerlink" title="日期函数–TODAY"></a>日期函数–TODAY</h1><h3 id="语法格式-7"><a href="#语法格式-7" class="headerlink" title="语法格式"></a>语法格式</h3><p><code>=TODAY()</code><br>获取当前日期<br><img src="/img/EXCEL常用函数总结/TODAY1.png"></p><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>根据出生日期求年龄<br><img src="/img/EXCEL常用函数总结/TODAY2.png"><br>公式:<br><code>=INT((TODAY()-E2)/365)</code><br>用今天的日期减去出生日期的天数再除去365天再取整</p><h1 id="计算日期间隔函数–DATEDIF"><a href="#计算日期间隔函数–DATEDIF" class="headerlink" title="计算日期间隔函数–DATEDIF"></a>计算日期间隔函数–DATEDIF</h1><h3 id="语法格式-8"><a href="#语法格式-8" class="headerlink" title="语法格式"></a>语法格式</h3><p><code>=DATEDIF(start_date,end_date,unit)</code><br>Start_date 为一个日期，它代表时间段内的第一个日期或起始日期。(起始日期必须在1900年之后)<br>End_date 为一个日期，它代表时间段内的最后一个日期或结束日期<br>Unit 为所需信息的返回类型,例如:y就是年,m是月,d是天<br>注:结束日期必须大于起始日期</p><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>根据出生日期求到2017年-1月-1日年的年龄<br><img src="/img/EXCEL常用函数总结/DATEDIF.png"></p><p>公式<br><code>=DATEDIF(C2,&quot;2017/1/1&quot;,&quot;y&quot;)</code><br>第一个参数是起始日期,第二个参数是结束日期2017年1月1日,第三个参数是返回值类型y是年<br>DATEDIF函数是Excel隐藏函数，其在帮助和插入公式里面没有</p>]]></content>
      
      
      <categories>
          
          <category> OFFICE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EXCEL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
